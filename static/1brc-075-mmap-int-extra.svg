<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>runtime.systemstack (25 samples, 0.10%)</title><rect x="1186.9" y="213" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1189.88" y="223.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (3,154 samples, 12.26%)</title><rect x="397.6" y="213" width="144.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="400.57" y="223.5" >runtime.mapaccess1..</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (64 samples, 0.25%)</title><rect x="1021.2" y="85" width="2.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1024.20" y="95.5" ></text>
</g>
<g >
<title>runtime.memmove (358 samples, 1.39%)</title><rect x="335.9" y="197" width="16.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="338.95" y="207.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (23 samples, 0.09%)</title><rect x="1185.3" y="197" width="1.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1188.32" y="207.5" ></text>
</g>
<g >
<title>runtime.markroot (5 samples, 0.02%)</title><rect x="1186.9" y="165" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1189.88" y="175.5" ></text>
</g>
<g >
<title>runtime.bucketShift (89 samples, 0.35%)</title><rect x="384.7" y="213" width="4.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="387.72" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).heapGoalInternal (3 samples, 0.01%)</title><rect x="1041.8" y="149" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1044.80" y="159.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (30 samples, 0.12%)</title><rect x="1186.7" y="229" width="1.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1189.65" y="239.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (5 samples, 0.02%)</title><rect x="1042.1" y="181" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1045.12" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (4 samples, 0.02%)</title><rect x="1185.1" y="197" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1188.14" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 0.02%)</title><rect x="799.2" y="197" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="802.17" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (68 samples, 0.26%)</title><rect x="1021.0" y="117" width="3.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1024.02" y="127.5" ></text>
</g>
<g >
<title>runtime.memmove (740 samples, 2.88%)</title><rect x="1044.5" y="197" width="34.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1047.51" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (10 samples, 0.04%)</title><rect x="1022.1" y="37" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1025.12" y="47.5" ></text>
</g>
<g >
<title>runtime.mapassign_faststr (3 samples, 0.01%)</title><rect x="799.0" y="213" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="802.04" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (6 samples, 0.02%)</title><rect x="1021.4" y="53" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1024.43" y="63.5" ></text>
</g>
<g >
<title>fmt.Printf (3 samples, 0.01%)</title><rect x="10.0" y="229" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (4 samples, 0.02%)</title><rect x="1186.7" y="181" width="0.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1189.65" y="191.5" ></text>
</g>
<g >
<title>runtime.makemap (3 samples, 0.01%)</title><rect x="388.8" y="213" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="391.80" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (18 samples, 0.07%)</title><rect x="1024.8" y="149" width="0.8" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1027.82" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (25 samples, 0.10%)</title><rect x="1186.9" y="181" width="1.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1189.88" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (33 samples, 0.13%)</title><rect x="1180.5" y="165" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1183.50" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (87 samples, 0.34%)</title><rect x="1020.6" y="149" width="4.0" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1023.65" y="159.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocker).tryAcquire (6 samples, 0.02%)</title><rect x="1186.4" y="197" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1189.38" y="207.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (5,596 samples, 21.76%)</title><rect x="542.3" y="213" width="256.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="545.28" y="223.5" >runtime.mapaccess2_faststr</text>
</g>
<g >
<title>runtime.(*sysMemStat).add (4 samples, 0.02%)</title><rect x="1184.6" y="133" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1187.63" y="143.5" ></text>
</g>
<g >
<title>main.merger (12 samples, 0.05%)</title><rect x="1119.7" y="229" width="0.6" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1122.71" y="239.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (6,962 samples, 27.07%)</title><rect x="799.4" y="213" width="319.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="802.36" y="223.5" >runtime.slicebytetostring</text>
</g>
<g >
<title>runtime.(*mheap).tryAllocMSpan (3 samples, 0.01%)</title><rect x="1024.0" y="69" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1026.95" y="79.5" ></text>
</g>
<g >
<title>runtime.morestack (28 samples, 0.11%)</title><rect x="1188.4" y="229" width="1.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.39" y="239.5" ></text>
</g>
<g >
<title>runtime.divRoundUp (3 samples, 0.01%)</title><rect x="869.0" y="197" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="871.96" y="207.5" ></text>
</g>
<g >
<title>runtime.procyield (12 samples, 0.05%)</title><rect x="1189.0" y="165" width="0.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1192.04" y="175.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (28 samples, 0.11%)</title><rect x="1188.4" y="213" width="1.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1191.39" y="223.5" ></text>
</g>
<g >
<title>runtime.acquirem (455 samples, 1.77%)</title><rect x="840.9" y="197" width="20.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="843.93" y="207.5" ></text>
</g>
<g >
<title>runtime.releasem (203 samples, 0.79%)</title><rect x="1109.5" y="197" width="9.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1112.48" y="207.5" ></text>
</g>
<g >
<title>main.aggregate (22,724 samples, 88.36%)</title><rect x="77.1" y="229" width="1042.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="80.08" y="239.5" >main.aggregate</text>
</g>
<g >
<title>runtime.preemptM (4 samples, 0.02%)</title><rect x="1186.7" y="133" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1189.65" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).memoryLimitHeapGoal (3 samples, 0.01%)</title><rect x="1041.8" y="133" width="0.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1044.80" y="143.5" ></text>
</g>
<g >
<title>memeqbody (444 samples, 1.73%)</title><rect x="511.4" y="197" width="20.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="514.40" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (14 samples, 0.05%)</title><rect x="1183.8" y="101" width="0.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1186.76" y="111.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (3 samples, 0.01%)</title><rect x="10.0" y="117" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>runtime.makeslice (188 samples, 0.73%)</title><rect x="388.9" y="213" width="8.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="391.94" y="223.5" ></text>
</g>
<g >
<title>runtime.bgsweep (101 samples, 0.39%)</title><rect x="1182.0" y="229" width="4.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1185.02" y="239.5" ></text>
</g>
<g >
<title>runtime.sweepone (100 samples, 0.39%)</title><rect x="1182.1" y="213" width="4.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1185.06" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (35 samples, 0.14%)</title><rect x="1021.7" y="53" width="1.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1024.70" y="63.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (25 samples, 0.10%)</title><rect x="1186.9" y="197" width="1.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1189.88" y="207.5" ></text>
</g>
<g >
<title>runtime.memequal (95 samples, 0.37%)</title><rect x="789.1" y="197" width="4.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="792.13" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (58 samples, 0.23%)</title><rect x="1021.3" y="69" width="2.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1024.29" y="79.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).run (33 samples, 0.13%)</title><rect x="1180.5" y="213" width="1.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1183.50" y="223.5" ></text>
</g>
<g >
<title>syscall.Write (3 samples, 0.01%)</title><rect x="10.0" y="181" width="0.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).trigger (5 samples, 0.02%)</title><rect x="1041.7" y="165" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1044.71" y="175.5" ></text>
</g>
<g >
<title>main.(*Measurements).Add (1,457 samples, 5.67%)</title><rect x="10.2" y="229" width="66.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="13.18" y="239.5" >main.(*..</text>
</g>
<g >
<title>runtime.(*bmap).keys (22 samples, 0.09%)</title><rect x="352.4" y="213" width="1.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="355.37" y="223.5" ></text>
</g>
<g >
<title>runtime.tgkill (3 samples, 0.01%)</title><rect x="1186.7" y="101" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1189.70" y="111.5" ></text>
</g>
<g >
<title>runtime.preemptall (4 samples, 0.02%)</title><rect x="1186.7" y="149" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1189.65" y="159.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).CompareAndSwap (3 samples, 0.01%)</title><rect x="1020.9" y="133" width="0.1" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1023.88" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (5 samples, 0.02%)</title><rect x="1027.0" y="181" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1030.03" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (119 samples, 0.46%)</title><rect x="1020.2" y="165" width="5.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1023.19" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (163 samples, 0.63%)</title><rect x="1019.5" y="181" width="7.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1022.55" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (41 samples, 0.16%)</title><rect x="1183.2" y="165" width="1.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1186.16" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (18 samples, 0.07%)</title><rect x="1187.1" y="165" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1190.11" y="175.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (4 samples, 0.02%)</title><rect x="380.9" y="213" width="0.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="383.87" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocToCache (3 samples, 0.01%)</title><rect x="1023.6" y="53" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1026.59" y="63.5" ></text>
</g>
<g >
<title>runtime.mcall (5 samples, 0.02%)</title><rect x="1188.2" y="229" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1191.16" y="239.5" ></text>
</g>
<g >
<title>runtime.gcmarknewobject (4 samples, 0.02%)</title><rect x="1041.9" y="181" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1044.94" y="191.5" ></text>
</g>
<g >
<title>syscall.Syscall (3 samples, 0.01%)</title><rect x="10.0" y="149" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>runtime.makeBucketArray (3 samples, 0.01%)</title><rect x="388.8" y="197" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="391.80" y="207.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (185 samples, 0.72%)</title><rect x="389.1" y="181" width="8.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="392.08" y="191.5" ></text>
</g>
<g >
<title>runtime.gcstopm (3 samples, 0.01%)</title><rect x="1188.5" y="149" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1191.49" y="159.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (33 samples, 0.13%)</title><rect x="1180.5" y="229" width="1.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1183.50" y="239.5" ></text>
</g>
<g >
<title>fmt.Fprintf (3 samples, 0.01%)</title><rect x="10.0" y="213" width="0.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3,620 samples, 14.08%)</title><rect x="878.4" y="197" width="166.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="881.41" y="207.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.(*spanSet).push (18 samples, 0.07%)</title><rect x="1024.8" y="133" width="0.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1027.82" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (34 samples, 0.13%)</title><rect x="1183.3" y="149" width="1.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1186.35" y="159.5" ></text>
</g>
<g >
<title>runtime.getMCache (202 samples, 0.79%)</title><rect x="869.1" y="197" width="9.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="872.10" y="207.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (4 samples, 0.02%)</title><rect x="1120.0" y="213" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1122.98" y="223.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (6 samples, 0.02%)</title><rect x="1021.4" y="37" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1024.43" y="47.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (185 samples, 0.72%)</title><rect x="389.1" y="165" width="8.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="392.08" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (18 samples, 0.07%)</title><rect x="1183.7" y="117" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1186.67" y="127.5" ></text>
</g>
<g >
<title>runtime.publicationBarrier (47 samples, 0.18%)</title><rect x="1042.4" y="181" width="2.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1045.35" y="191.5" ></text>
</g>
<g >
<title>runtime.strhash (142 samples, 0.55%)</title><rect x="535.8" y="197" width="6.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="538.76" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (13 samples, 0.05%)</title><rect x="1026.4" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1029.43" y="159.5" ></text>
</g>
<g >
<title>runtime.newarray (3 samples, 0.01%)</title><rect x="388.8" y="181" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="391.80" y="191.5" ></text>
</g>
<g >
<title>runtime.mallocgc (188 samples, 0.73%)</title><rect x="388.9" y="197" width="8.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="391.94" y="207.5" ></text>
</g>
<g >
<title>runtime.schedule (11 samples, 0.04%)</title><rect x="1188.4" y="181" width="0.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1191.39" y="191.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (5 samples, 0.02%)</title><rect x="1186.9" y="149" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1189.88" y="159.5" ></text>
</g>
<g >
<title>all (25,718 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (20 samples, 0.08%)</title><rect x="1183.7" y="133" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1186.67" y="143.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (4 samples, 0.02%)</title><rect x="1186.7" y="165" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1189.65" y="175.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (4 samples, 0.02%)</title><rect x="1119.8" y="213" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1122.80" y="223.5" ></text>
</g>
<g >
<title>runtime.tophash (20 samples, 0.08%)</title><rect x="1118.8" y="213" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1121.79" y="223.5" ></text>
</g>
<g >
<title>runtime.sysUnused (33 samples, 0.13%)</title><rect x="1180.5" y="133" width="1.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1183.50" y="143.5" ></text>
</g>
<g >
<title>runtime.strhash (121 samples, 0.47%)</title><rect x="793.5" y="197" width="5.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="796.49" y="207.5" ></text>
</g>
<g >
<title>runtime.main (3 samples, 0.01%)</title><rect x="1188.0" y="229" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1191.03" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (6 samples, 0.02%)</title><rect x="1041.3" y="117" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1044.30" y="127.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (6 samples, 0.02%)</title><rect x="1041.3" y="101" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1044.30" y="111.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (6 samples, 0.02%)</title><rect x="1041.7" y="181" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1044.66" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (7 samples, 0.03%)</title><rect x="1041.2" y="149" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1044.25" y="159.5" ></text>
</g>
<g >
<title>aeshashbody (1,067 samples, 4.15%)</title><rect x="462.4" y="197" width="49.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="465.44" y="207.5" >aesh..</text>
</g>
<g >
<title>runtime.gcAssistAlloc (9 samples, 0.03%)</title><rect x="1041.2" y="165" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1044.16" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (41 samples, 0.16%)</title><rect x="1183.2" y="181" width="1.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1186.16" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (13 samples, 0.05%)</title><rect x="1022.6" y="37" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1025.58" y="47.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeMSpanLocked (3 samples, 0.01%)</title><rect x="1183.2" y="149" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1186.21" y="159.5" ></text>
</g>
<g >
<title>runtime.newobject (4 samples, 0.02%)</title><rect x="799.2" y="213" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="802.17" y="223.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (3 samples, 0.01%)</title><rect x="10.0" y="133" width="0.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>runtime.signalM (4 samples, 0.02%)</title><rect x="1186.7" y="117" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1189.65" y="127.5" ></text>
</g>
<g >
<title>os.(*File).write (3 samples, 0.01%)</title><rect x="10.0" y="197" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (4 samples, 0.02%)</title><rect x="1186.7" y="197" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1189.65" y="207.5" ></text>
</g>
<g >
<title>runtime.bucketMask (80 samples, 0.31%)</title><rect x="381.0" y="213" width="3.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="384.05" y="223.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (33 samples, 0.13%)</title><rect x="1180.5" y="197" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1183.50" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (68 samples, 0.26%)</title><rect x="1021.0" y="133" width="3.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1024.02" y="143.5" ></text>
</g>
<g >
<title>golang.org/x/exp/mmap.(*ReaderAt).ReadAt (358 samples, 1.39%)</title><rect x="335.9" y="213" width="16.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="338.95" y="223.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (309 samples, 1.20%)</title><rect x="1027.4" y="181" width="14.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1030.39" y="191.5" ></text>
</g>
<g >
<title>syscall.write (3 samples, 0.01%)</title><rect x="10.0" y="165" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).CompareAndSwap (5 samples, 0.02%)</title><rect x="1182.9" y="197" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1185.89" y="207.5" ></text>
</g>
<g >
<title>runtime.madvise (33 samples, 0.13%)</title><rect x="1180.5" y="101" width="1.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1183.50" y="111.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (5 samples, 0.02%)</title><rect x="1023.7" y="53" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1026.72" y="63.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.01%)</title><rect x="388.8" y="165" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="391.80" y="175.5" ></text>
</g>
<g >
<title>runtime.findRunnable (7 samples, 0.03%)</title><rect x="1188.4" y="165" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1191.44" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.01%)</title><rect x="1189.8" y="229" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1192.77" y="239.5" ></text>
</g>
<g >
<title>main.parseTempToInt (1,313 samples, 5.11%)</title><rect x="1120.3" y="229" width="60.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1123.26" y="239.5" >main.p..</text>
</g>
<g >
<title>memeqbody (817 samples, 3.18%)</title><rect x="751.6" y="197" width="37.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="754.64" y="207.5" >mem..</text>
</g>
<g >
<title>runtime.nextFreeFast (676 samples, 2.63%)</title><rect x="1078.5" y="197" width="31.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1081.46" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.(*mspan).base (6 samples, 0.02%)</title><rect x="1023.3" y="53" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1026.31" y="63.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (6 samples, 0.02%)</title><rect x="1024.1" y="133" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1027.14" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).partialSwept (3 samples, 0.01%)</title><rect x="1024.7" y="149" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1027.69" y="159.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (6 samples, 0.02%)</title><rect x="1185.8" y="181" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1188.78" y="191.5" ></text>
</g>
<g >
<title>aeshashbody (1,280 samples, 4.98%)</title><rect x="692.9" y="197" width="58.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="695.91" y="207.5" >aeshas..</text>
</g>
<g >
<title>runtime.(*mspan).divideByElemSize (3 samples, 0.01%)</title><rect x="1027.3" y="181" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1030.26" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (33 samples, 0.13%)</title><rect x="1180.5" y="149" width="1.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1183.50" y="159.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (6 samples, 0.02%)</title><rect x="1041.3" y="133" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1044.30" y="143.5" ></text>
</g>
<g >
<title>runtime.add (598 samples, 2.33%)</title><rect x="353.4" y="213" width="27.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="356.43" y="223.5" >r..</text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (30 samples, 0.12%)</title><rect x="1025.6" y="165" width="1.4" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1028.65" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (68 samples, 0.26%)</title><rect x="1021.0" y="101" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1024.02" y="111.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (33 samples, 0.13%)</title><rect x="1180.5" y="181" width="1.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1183.50" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (11 samples, 0.04%)</title><rect x="1188.4" y="197" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1191.39" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (15 samples, 0.06%)</title><rect x="1188.9" y="197" width="0.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1191.90" y="207.5" ></text>
</g>
<g >
<title>runtime.lock2 (15 samples, 0.06%)</title><rect x="1188.9" y="181" width="0.7" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1191.90" y="191.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (33 samples, 0.13%)</title><rect x="1180.5" y="117" width="1.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1183.50" y="127.5" ></text>
</g>
<g >
<title>runtime.forEachP (4 samples, 0.02%)</title><rect x="1186.7" y="213" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1189.65" y="223.5" ></text>
</g>
<g >
<title>runtime.alignUp (156 samples, 0.61%)</title><rect x="861.8" y="197" width="7.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="864.80" y="207.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.01%)</title><rect x="1041.4" y="85" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1044.43" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (41 samples, 0.16%)</title><rect x="1183.2" y="197" width="1.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1186.16" y="207.5" ></text>
</g>
<g >
<title>runtime.memequal (87 samples, 0.34%)</title><rect x="531.8" y="197" width="4.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="534.77" y="207.5" ></text>
</g>
</g>
</svg>
