<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>runtime.madvise (72 samples, 0.17%)</title><rect x="1185.5" y="117" width="2.0" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1188.49" y="127.5" ></text>
</g>
<g >
<title>runtime.mcall (4 samples, 0.01%)</title><rect x="1189.7" y="245" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1192.75" y="255.5" ></text>
</g>
<g >
<title>runtime.strhash (169 samples, 0.40%)</title><rect x="399.4" y="213" width="4.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="402.40" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (64 samples, 0.15%)</title><rect x="797.8" y="117" width="1.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="800.85" y="127.5" ></text>
</g>
<g >
<title>strconv.parseFloatPrefix (10,222 samples, 24.13%)</title><rect x="900.6" y="213" width="284.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="903.59" y="223.5" >strconv.parseFloatPrefix</text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (14 samples, 0.03%)</title><rect x="1189.2" y="213" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1192.25" y="223.5" ></text>
</g>
<g >
<title>all (42,367 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.memequal (117 samples, 0.28%)</title><rect x="604.8" y="213" width="3.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="607.83" y="223.5" ></text>
</g>
<g >
<title>runtime.unlock2 (4 samples, 0.01%)</title><rect x="1188.6" y="149" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1191.61" y="159.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (4,908 samples, 11.58%)</title><rect x="267.4" y="229" width="136.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="270.41" y="239.5" >runtime.mapaccess..</text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (20 samples, 0.05%)</title><rect x="800.5" y="181" width="0.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="803.55" y="191.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (6 samples, 0.01%)</title><rect x="797.5" y="165" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="800.46" y="175.5" ></text>
</g>
<g >
<title>memeqbody (674 samples, 1.59%)</title><rect x="376.9" y="213" width="18.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="379.86" y="223.5" ></text>
</g>
<g >
<title>aeshashbody (1,308 samples, 3.09%)</title><rect x="536.0" y="213" width="36.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="538.98" y="223.5" >aes..</text>
</g>
<g >
<title>runtime.(*mspan).base (4 samples, 0.01%)</title><rect x="801.1" y="197" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="804.10" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (75 samples, 0.18%)</title><rect x="1185.4" y="197" width="2.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1188.40" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (10 samples, 0.02%)</title><rect x="798.9" y="53" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="801.90" y="63.5" ></text>
</g>
<g >
<title>strconv.readFloat (6,129 samples, 14.47%)</title><rect x="999.6" y="181" width="170.7" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1002.58" y="191.5" >strconv.readFloat</text>
</g>
<g >
<title>runtime.(*mheap).reclaim (5 samples, 0.01%)</title><rect x="799.5" y="85" width="0.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="802.49" y="95.5" ></text>
</g>
<g >
<title>main.merger (4 samples, 0.01%)</title><rect x="1185.3" y="245" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1188.29" y="255.5" ></text>
</g>
<g >
<title>runtime.(*bmap).overflow (11 samples, 0.03%)</title><rect x="235.9" y="229" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="238.91" y="239.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (9 samples, 0.02%)</title><rect x="254.9" y="229" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="257.90" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (75 samples, 0.18%)</title><rect x="1185.4" y="181" width="2.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1188.40" y="191.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (72 samples, 0.17%)</title><rect x="1185.5" y="133" width="2.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1188.49" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (86 samples, 0.20%)</title><rect x="797.7" y="165" width="2.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="800.71" y="175.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (7 samples, 0.02%)</title><rect x="800.3" y="133" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="803.30" y="143.5" ></text>
</g>
<g >
<title>runtime.bucketMask (89 samples, 0.21%)</title><rect x="255.2" y="229" width="2.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="258.15" y="239.5" ></text>
</g>
<g >
<title>strconv.ParseFloat (10,924 samples, 25.78%)</title><rect x="881.0" y="229" width="304.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="884.04" y="239.5" >strconv.ParseFloat</text>
</g>
<g >
<title>runtime.bgsweep (62 samples, 0.15%)</title><rect x="1187.5" y="245" width="1.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1190.49" y="255.5" ></text>
</g>
<g >
<title>runtime.strhash (103 samples, 0.24%)</title><rect x="608.1" y="213" width="2.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="611.12" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (150 samples, 0.35%)</title><rect x="796.9" y="197" width="4.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="799.93" y="207.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (245 samples, 0.58%)</title><rect x="260.6" y="197" width="6.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="263.58" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (20 samples, 0.05%)</title><rect x="1187.9" y="165" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1190.94" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (245 samples, 0.58%)</title><rect x="260.6" y="181" width="6.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="263.58" y="191.5" ></text>
</g>
<g >
<title>strconv.atof64exact (1,744 samples, 4.12%)</title><rect x="950.4" y="181" width="48.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="953.42" y="191.5" >strc..</text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (9 samples, 0.02%)</title><rect x="1188.1" y="117" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1191.05" y="127.5" ></text>
</g>
<g >
<title>runtime.(*bmap).keys (33 samples, 0.08%)</title><rect x="235.0" y="229" width="0.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="237.99" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (64 samples, 0.15%)</title><rect x="797.8" y="133" width="1.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="800.85" y="143.5" ></text>
</g>
<g >
<title>runtime.tophash (27 samples, 0.06%)</title><rect x="880.3" y="229" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="883.29" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (14 samples, 0.03%)</title><rect x="800.1" y="165" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="803.13" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (64 samples, 0.15%)</title><rect x="797.8" y="149" width="1.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="800.85" y="159.5" ></text>
</g>
<g >
<title>runtime.acquirem (537 samples, 1.27%)</title><rect x="663.5" y="213" width="15.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="666.54" y="223.5" ></text>
</g>
<g >
<title>runtime.sysUnused (72 samples, 0.17%)</title><rect x="1185.5" y="149" width="2.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1188.49" y="159.5" ></text>
</g>
<g >
<title>runtime.divRoundUp (4 samples, 0.01%)</title><rect x="686.3" y="213" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="689.30" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (7 samples, 0.02%)</title><rect x="798.7" y="53" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="801.68" y="63.5" ></text>
</g>
<g >
<title>main.aggregate (40,802 samples, 96.31%)</title><rect x="48.9" y="245" width="1136.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="51.88" y="255.5" >main.aggregate</text>
</g>
<g >
<title>aeshashbody (1,250 samples, 2.95%)</title><rect x="342.0" y="213" width="34.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="345.05" y="223.5" >ae..</text>
</g>
<g >
<title>runtime.getMCache (244 samples, 0.58%)</title><rect x="686.4" y="213" width="6.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="689.41" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (8 samples, 0.02%)</title><rect x="1189.4" y="181" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1192.42" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (6 samples, 0.01%)</title><rect x="799.3" y="69" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="802.29" y="79.5" ></text>
</g>
<g >
<title>runtime.publicationBarrier (46 samples, 0.11%)</title><rect x="810.9" y="197" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="813.88" y="207.5" ></text>
</g>
<g >
<title>strconv.special (539 samples, 1.27%)</title><rect x="1170.3" y="181" width="15.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1173.28" y="191.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (7,428 samples, 17.53%)</title><rect x="404.1" y="229" width="206.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="407.10" y="239.5" >runtime.mapaccess2_faststr</text>
</g>
<g >
<title>runtime.memmove (1,528 samples, 3.61%)</title><rect x="812.2" y="213" width="42.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="815.16" y="223.5" >runt..</text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (75 samples, 0.18%)</title><rect x="1185.4" y="213" width="2.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1188.40" y="223.5" ></text>
</g>
<g >
<title>runtime.sweepone (58 samples, 0.14%)</title><rect x="1187.6" y="229" width="1.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1190.60" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (6 samples, 0.01%)</title><rect x="810.5" y="149" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="813.52" y="159.5" ></text>
</g>
<g >
<title>runtime.releasem (161 samples, 0.38%)</title><rect x="875.8" y="213" width="4.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="878.80" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (30 samples, 0.07%)</title><rect x="1187.9" y="197" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1190.88" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (9 samples, 0.02%)</title><rect x="798.1" y="69" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="801.12" y="79.5" ></text>
</g>
<g >
<title>runtime.bucketShift (101 samples, 0.24%)</title><rect x="257.6" y="229" width="2.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="260.63" y="239.5" ></text>
</g>
<g >
<title>runtime.alignUp (280 samples, 0.66%)</title><rect x="678.5" y="213" width="7.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="681.50" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (12 samples, 0.03%)</title><rect x="800.8" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="803.77" y="175.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (4 samples, 0.01%)</title><rect x="1188.6" y="165" width="0.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1191.61" y="175.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (14 samples, 0.03%)</title><rect x="800.1" y="149" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="803.13" y="159.5" ></text>
</g>
<g >
<title>golang.org/x/exp/mmap.(*ReaderAt).ReadAt (363 samples, 0.86%)</title><rect x="224.9" y="229" width="10.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="227.88" y="239.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (4 samples, 0.01%)</title><rect x="1189.3" y="165" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.28" y="175.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (10 samples, 0.02%)</title><rect x="1188.9" y="213" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1191.91" y="223.5" ></text>
</g>
<g >
<title>runtime.add (671 samples, 1.58%)</title><rect x="236.2" y="229" width="18.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="239.21" y="239.5" ></text>
</g>
<g >
<title>runtime.markroot (4 samples, 0.01%)</title><rect x="810.5" y="101" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="813.55" y="111.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (5 samples, 0.01%)</title><rect x="799.5" y="37" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="802.49" y="47.5" ></text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (4 samples, 0.01%)</title><rect x="1188.8" y="213" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1191.80" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (14 samples, 0.03%)</title><rect x="1188.0" y="133" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1190.97" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (57 samples, 0.13%)</title><rect x="797.9" y="85" width="1.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="800.90" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (14 samples, 0.03%)</title><rect x="1189.2" y="229" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1192.25" y="239.5" ></text>
</g>
<g >
<title>strconv.atof64 (9,869 samples, 23.29%)</title><rect x="910.4" y="197" width="274.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="913.42" y="207.5" >strconv.atof64</text>
</g>
<g >
<title>runtime.main (4 samples, 0.01%)</title><rect x="1189.6" y="245" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1192.64" y="255.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (757 samples, 1.79%)</title><rect x="854.7" y="213" width="21.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="857.72" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (363 samples, 0.86%)</title><rect x="224.9" y="213" width="10.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="227.88" y="223.5" ></text>
</g>
<g >
<title>runtime.makeslice (250 samples, 0.59%)</title><rect x="260.4" y="229" width="7.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="263.44" y="239.5" ></text>
</g>
<g >
<title>memeqbody (1,164 samples, 2.75%)</title><rect x="572.4" y="213" width="32.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="575.41" y="223.5" >me..</text>
</g>
<g >
<title>runtime.mallocgc (4,270 samples, 10.08%)</title><rect x="693.2" y="213" width="119.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="696.23" y="223.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.memequal (135 samples, 0.32%)</title><rect x="395.6" y="213" width="3.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="398.64" y="223.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (338 samples, 0.80%)</title><rect x="801.3" y="197" width="9.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="804.27" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (250 samples, 0.59%)</title><rect x="260.4" y="213" width="7.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="263.44" y="223.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (75 samples, 0.18%)</title><rect x="1185.4" y="245" width="2.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1188.40" y="255.5" ></text>
</g>
<g >
<title>strconv.commonPrefixLenIgnoreCase (20 samples, 0.05%)</title><rect x="999.0" y="181" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1001.99" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (5 samples, 0.01%)</title><rect x="799.8" y="133" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="802.82" y="143.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (6 samples, 0.01%)</title><rect x="810.5" y="133" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="813.52" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (64 samples, 0.15%)</title><rect x="797.8" y="101" width="1.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="800.85" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (31 samples, 0.07%)</title><rect x="798.4" y="69" width="0.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="801.37" y="79.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (75 samples, 0.18%)</title><rect x="1185.4" y="165" width="2.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1188.40" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 0.01%)</title><rect x="810.5" y="165" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="813.52" y="175.5" ></text>
</g>
<g >
<title>main.(*Measurements).Add (1,395 samples, 3.29%)</title><rect x="10.0" y="245" width="38.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="13.03" y="255.5" >mai..</text>
</g>
<g >
<title>runtime.(*mheap).reclaimChunk (5 samples, 0.01%)</title><rect x="799.5" y="69" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="802.49" y="79.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (9,665 samples, 22.81%)</title><rect x="611.1" y="229" width="269.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="614.10" y="239.5" >runtime.slicebytetostring</text>
</g>
<g >
<title>runtime.(*mcache).refill (119 samples, 0.28%)</title><rect x="797.2" y="181" width="3.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="800.23" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (5 samples, 0.01%)</title><rect x="799.5" y="53" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="802.49" y="63.5" ></text>
</g>
<g >
<title>runtime.gcDrain (14 samples, 0.03%)</title><rect x="1189.2" y="197" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1192.25" y="207.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (7 samples, 0.02%)</title><rect x="810.7" y="197" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="813.69" y="207.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (15 samples, 0.04%)</title><rect x="1189.2" y="245" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.22" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (19 samples, 0.04%)</title><rect x="1188.0" y="149" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1190.97" y="159.5" ></text>
</g>
<g >
<title>runtime.markroot (5 samples, 0.01%)</title><rect x="1189.3" y="181" width="0.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1192.28" y="191.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (9 samples, 0.02%)</title><rect x="798.1" y="53" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="801.12" y="63.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (30 samples, 0.07%)</title><rect x="1187.9" y="181" width="0.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1190.88" y="191.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (6 samples, 0.01%)</title><rect x="810.5" y="181" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="813.52" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (9 samples, 0.02%)</title><rect x="799.7" y="149" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="802.74" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (30 samples, 0.07%)</title><rect x="1187.9" y="213" width="0.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1190.88" y="223.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).run (75 samples, 0.18%)</title><rect x="1185.4" y="229" width="2.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1188.40" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (6 samples, 0.01%)</title><rect x="810.5" y="117" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="813.52" y="127.5" ></text>
</g>
</g>
</svg>
