<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>runtime.getMCache (54 samples, 0.38%)</title><rect x="67.9" y="197" width="4.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="70.91" y="207.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 0.01%)</title><rect x="1189.7" y="245" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1192.67" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.01%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1192.84" y="255.5" ></text>
</g>
<g >
<title>strconv.atof64 (3,209 samples, 22.37%)</title><rect x="800.0" y="181" width="264.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="803.01" y="191.5" >strconv.atof64</text>
</g>
<g >
<title>runtime.(*scavengerState).run (2 samples, 0.01%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (577 samples, 4.02%)</title><rect x="438.1" y="117" width="47.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="441.07" y="127.5" >inte..</text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.01%)</title><rect x="1188.6" y="133" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.60" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot (12 samples, 0.08%)</title><rect x="17.5" y="181" width="1.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="20.49" y="191.5" ></text>
</g>
<g >
<title>bufio.(*Scanner).advance (65 samples, 0.45%)</title><rect x="485.8" y="213" width="5.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="488.78" y="223.5" ></text>
</g>
<g >
<title>unicode/utf8.RuneStart (2 samples, 0.01%)</title><rect x="1123.0" y="165" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1125.96" y="175.5" ></text>
</g>
<g >
<title>runtime.lock2 (4 samples, 0.03%)</title><rect x="1189.3" y="197" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1192.34" y="207.5" ></text>
</g>
<g >
<title>runtime.futex (2 samples, 0.01%)</title><rect x="1188.8" y="117" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1191.77" y="127.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (27 samples, 0.19%)</title><rect x="11.1" y="181" width="2.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="14.07" y="191.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (2 samples, 0.01%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (111 samples, 0.77%)</title><rect x="16.9" y="213" width="9.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="19.91" y="223.5" ></text>
</g>
<g >
<title>runtime.bgsweep (67 samples, 0.47%)</title><rect x="10.2" y="245" width="5.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="13.16" y="255.5" ></text>
</g>
<g >
<title>unicode/utf8.DecodeRuneInString (17 samples, 0.12%)</title><rect x="1121.6" y="149" width="1.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1124.56" y="159.5" ></text>
</g>
<g >
<title>runtime.spanOf (4 samples, 0.03%)</title><rect x="22.3" y="165" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="25.34" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (2 samples, 0.01%)</title><rect x="21.1" y="165" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="24.10" y="175.5" ></text>
</g>
<g >
<title>internal/stringslite.IndexByte (564 samples, 3.93%)</title><rect x="1139.4" y="213" width="46.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1142.41" y="223.5" >inte..</text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (4 samples, 0.03%)</title><rect x="175.0" y="53" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="178.01" y="63.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (53 samples, 0.37%)</title><rect x="430.3" y="181" width="4.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="433.34" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (5 samples, 0.03%)</title><rect x="15.8" y="181" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="18.76" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (4 samples, 0.03%)</title><rect x="1189.3" y="181" width="0.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1192.34" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.01%)</title><rect x="10.0" y="181" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>syscall.Read (604 samples, 4.21%)</title><rect x="435.9" y="181" width="49.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="438.85" y="191.5" >sysca..</text>
</g>
<g >
<title>runtime.readUintptr (2 samples, 0.01%)</title><rect x="22.2" y="165" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="25.17" y="175.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (2 samples, 0.01%)</title><rect x="435.3" y="149" width="0.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="438.28" y="159.5" ></text>
</g>
<g >
<title>runtime.mPark (2 samples, 0.01%)</title><rect x="1188.6" y="149" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1191.60" y="159.5" ></text>
</g>
<g >
<title>strconv.ParseFloat (3,500 samples, 24.40%)</title><rect x="776.1" y="213" width="287.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="779.07" y="223.5" >strconv.ParseFloat</text>
</g>
<g >
<title>runtime.spanOf (2 samples, 0.01%)</title><rect x="188.0" y="37" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="191.01" y="47.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (3 samples, 0.02%)</title><rect x="175.8" y="37" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="178.75" y="47.5" ></text>
</g>
<g >
<title>runtime.unlock2 (2 samples, 0.01%)</title><rect x="1188.1" y="181" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1191.11" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (14 samples, 0.10%)</title><rect x="11.5" y="149" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="14.48" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.forEachP.func6 (3 samples, 0.02%)</title><rect x="16.2" y="181" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="19.17" y="191.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (2 samples, 0.01%)</title><rect x="1188.8" y="133" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1191.77" y="143.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (113 samples, 0.79%)</title><rect x="179.5" y="181" width="9.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="182.54" y="191.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (2 samples, 0.01%)</title><rect x="13.3" y="197" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="16.29" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (33 samples, 0.23%)</title><rect x="174.3" y="85" width="2.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="177.27" y="95.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (16 samples, 0.11%)</title><rect x="436.6" y="133" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="439.59" y="143.5" ></text>
</g>
<g >
<title>runtime.futex (2 samples, 0.01%)</title><rect x="15.8" y="117" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="18.76" y="127.5" ></text>
</g>
<g >
<title>runtime.scanblock (19 samples, 0.13%)</title><rect x="186.6" y="53" width="1.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="189.61" y="63.5" ></text>
</g>
<g >
<title>runtime.morestack (17 samples, 0.12%)</title><rect x="1188.3" y="245" width="1.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.27" y="255.5" ></text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (2 samples, 0.01%)</title><rect x="16.6" y="181" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="19.58" y="191.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (579 samples, 4.04%)</title><rect x="437.9" y="133" width="47.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="440.91" y="143.5" >sysc..</text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (4 samples, 0.03%)</title><rect x="175.0" y="37" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="178.01" y="47.5" ></text>
</g>
<g >
<title>bufio.(*Scanner).Scan (1,839 samples, 12.82%)</title><rect x="334.5" y="213" width="151.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="337.51" y="223.5" >bufio.(*Scanner).Scan</text>
</g>
<g >
<title>runtime.publicationBarrier (34 samples, 0.24%)</title><rect x="189.5" y="181" width="2.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="192.49" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (81 samples, 0.56%)</title><rect x="18.5" y="181" width="6.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="21.47" y="191.5" ></text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.01%)</title><rect x="187.8" y="37" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="190.84" y="47.5" ></text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (6 samples, 0.04%)</title><rect x="13.6" y="213" width="0.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="16.62" y="223.5" ></text>
</g>
<g >
<title>runtime.casgstatus (6 samples, 0.04%)</title><rect x="436.9" y="117" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="439.92" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (2 samples, 0.01%)</title><rect x="17.2" y="165" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="20.24" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).heapGoalInternal (2 samples, 0.01%)</title><rect x="189.3" y="149" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="192.32" y="159.5" ></text>
</g>
<g >
<title>strconv.readFloat (1,755 samples, 12.23%)</title><rect x="905.1" y="165" width="144.4" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="908.14" y="175.5" >strconv.readFloat</text>
</g>
<g >
<title>strconv.parseFloatPrefix (3,343 samples, 23.30%)</title><rect x="789.0" y="197" width="275.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="791.99" y="207.5" >strconv.parseFloatPrefix</text>
</g>
<g >
<title>bufio.(*Scanner).Text (2,757 samples, 19.22%)</title><rect x="26.4" y="229" width="226.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="29.37" y="239.5" >bufio.(*Scanner).Text</text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.02%)</title><rect x="16.6" y="213" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="19.58" y="223.5" ></text>
</g>
<g >
<title>unicode.IsSpace (3 samples, 0.02%)</title><rect x="1120.7" y="165" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1123.66" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (3 samples, 0.02%)</title><rect x="26.0" y="197" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="29.04" y="207.5" ></text>
</g>
<g >
<title>runtime.futexsleep (8 samples, 0.06%)</title><rect x="1186.5" y="149" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1189.46" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (28 samples, 0.20%)</title><rect x="11.0" y="197" width="2.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.99" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (33 samples, 0.23%)</title><rect x="174.3" y="117" width="2.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="177.27" y="127.5" ></text>
</g>
<g >
<title>runtime.makeSpanClass (6 samples, 0.04%)</title><rect x="72.4" y="197" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="75.35" y="207.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (3,161 samples, 22.04%)</title><rect x="515.5" y="213" width="260.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="518.48" y="223.5" >runtime.mapaccess2_faststr</text>
</g>
<g >
<title>runtime.stealWork (5 samples, 0.03%)</title><rect x="1187.4" y="181" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1190.37" y="191.5" ></text>
</g>
<g >
<title>unicode/utf8.DecodeRuneInString (14 samples, 0.10%)</title><rect x="1123.1" y="181" width="1.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1126.12" y="191.5" ></text>
</g>
<g >
<title>runtime.reentersyscall (4 samples, 0.03%)</title><rect x="436.2" y="117" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="439.18" y="127.5" ></text>
</g>
<g >
<title>main.main (10,590 samples, 73.82%)</title><rect x="253.2" y="229" width="871.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="256.16" y="239.5" >main.main</text>
</g>
<g >
<title>runtime.(*sweepLocker).tryAcquire (4 samples, 0.03%)</title><rect x="15.3" y="213" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="18.26" y="223.5" ></text>
</g>
<g >
<title>syscall.read (604 samples, 4.21%)</title><rect x="435.9" y="165" width="49.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="438.85" y="175.5" >sysca..</text>
</g>
<g >
<title>runtime.bucketShift (22 samples, 0.15%)</title><rect x="513.7" y="213" width="1.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="516.67" y="223.5" ></text>
</g>
<g >
<title>strings.TrimFunc (25 samples, 0.17%)</title><rect x="1117.3" y="197" width="2.0" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1120.28" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (30 samples, 0.21%)</title><rect x="174.3" y="69" width="2.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="177.27" y="79.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (3 samples, 0.02%)</title><rect x="189.2" y="181" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="192.24" y="191.5" ></text>
</g>
<g >
<title>runtime.signalM (3 samples, 0.02%)</title><rect x="15.9" y="133" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="18.92" y="143.5" ></text>
</g>
<g >
<title>bufio.ScanLines (186 samples, 1.30%)</title><rect x="374.7" y="197" width="15.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="377.73" y="207.5" ></text>
</g>
<g >
<title>strings.indexFunc (15 samples, 0.10%)</title><rect x="1118.1" y="181" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1121.11" y="191.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (19 samples, 0.13%)</title><rect x="186.6" y="69" width="1.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="189.61" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).partialSwept (3 samples, 0.02%)</title><rect x="177.0" y="149" width="0.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="179.99" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (4 samples, 0.03%)</title><rect x="1187.8" y="181" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1190.78" y="191.5" ></text>
</g>
<g >
<title>unicode.is16 (4 samples, 0.03%)</title><rect x="1119.0" y="133" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1122.01" y="143.5" ></text>
</g>
<g >
<title>runtime.schedule (29 samples, 0.20%)</title><rect x="1185.9" y="213" width="2.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1188.89" y="223.5" ></text>
</g>
<g >
<title>runtime.wirep (2 samples, 0.01%)</title><rect x="437.7" y="101" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="440.74" y="111.5" ></text>
</g>
<g >
<title>runtime.findRunnable (22 samples, 0.15%)</title><rect x="1186.0" y="197" width="1.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1188.97" y="207.5" ></text>
</g>
<g >
<title>runtime.acquirem (59 samples, 0.41%)</title><rect x="54.7" y="197" width="4.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="57.67" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).tryAllocMSpan (2 samples, 0.01%)</title><rect x="176.7" y="69" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="179.74" y="79.5" ></text>
</g>
<g >
<title>runtime.signalM (2 samples, 0.01%)</title><rect x="17.2" y="133" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="20.24" y="143.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (12 samples, 0.08%)</title><rect x="14.3" y="213" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="17.28" y="223.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).next (2 samples, 0.01%)</title><rect x="18.0" y="133" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="20.98" y="143.5" ></text>
</g>
<g >
<title>memeqbody (556 samples, 3.88%)</title><rect x="721.9" y="197" width="45.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="724.95" y="207.5" >meme..</text>
</g>
<g >
<title>runtime.mPark (9 samples, 0.06%)</title><rect x="1186.4" y="181" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1189.38" y="191.5" ></text>
</g>
<g >
<title>internal/stringslite.Index (138 samples, 0.96%)</title><rect x="1128.1" y="213" width="11.3" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1131.06" y="223.5" ></text>
</g>
<g >
<title>runtime.scanobject (7 samples, 0.05%)</title><rect x="188.2" y="85" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="191.17" y="95.5" ></text>
</g>
<g >
<title>runtime.bucketMask (24 samples, 0.17%)</title><rect x="511.7" y="213" width="2.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="514.70" y="223.5" ></text>
</g>
<g >
<title>runtime.scanstack (3 samples, 0.02%)</title><rect x="18.0" y="149" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="20.98" y="159.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).initAt (4 samples, 0.03%)</title><rect x="17.6" y="133" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="20.57" y="143.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (8 samples, 0.06%)</title><rect x="17.6" y="165" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="20.57" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot (19 samples, 0.13%)</title><rect x="186.6" y="85" width="1.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="189.61" y="95.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.02%)</title><rect x="13.0" y="149" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="15.96" y="159.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (2,661 samples, 18.55%)</title><rect x="34.3" y="213" width="218.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="37.27" y="223.5" >runtime.slicebytetostring</text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint8).Load (2 samples, 0.01%)</title><rect x="435.9" y="117" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="438.94" y="127.5" ></text>
</g>
<g >
<title>runtime.futexsleep (2 samples, 0.01%)</title><rect x="1188.6" y="117" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.60" y="127.5" ></text>
</g>
<g >
<title>runtime.strhash (46 samples, 0.32%)</title><rect x="771.7" y="197" width="3.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="774.71" y="207.5" ></text>
</g>
<g >
<title>runtime.mcall (30 samples, 0.21%)</title><rect x="1185.8" y="245" width="2.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1188.80" y="255.5" ></text>
</g>
<g >
<title>syscall.Syscall (604 samples, 4.21%)</title><rect x="435.9" y="149" width="49.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="438.85" y="159.5" >sysca..</text>
</g>
<g >
<title>runtime.procyield (3 samples, 0.02%)</title><rect x="1187.9" y="165" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1190.86" y="175.5" ></text>
</g>
<g >
<title>indexbytebody (408 samples, 2.84%)</title><rect x="1145.3" y="197" width="33.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1148.25" y="207.5" >in..</text>
</g>
<g >
<title>runtime.sysUnusedOS (2 samples, 0.01%)</title><rect x="10.0" y="133" width="0.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (22 samples, 0.15%)</title><rect x="11.2" y="165" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="14.15" y="175.5" ></text>
</g>
<g >
<title>runtime.futexsleep (2 samples, 0.01%)</title><rect x="15.8" y="133" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="18.76" y="143.5" ></text>
</g>
<g >
<title>runtime.memequal (49 samples, 0.34%)</title><rect x="767.7" y="197" width="4.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="770.68" y="207.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (418 samples, 2.91%)</title><rect x="215.6" y="197" width="34.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="218.56" y="207.5" >ru..</text>
</g>
<g >
<title>strings.lastIndexFunc (36 samples, 0.25%)</title><rect x="1120.2" y="181" width="2.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1123.16" y="191.5" ></text>
</g>
<g >
<title>strconv.special (176 samples, 1.23%)</title><rect x="1049.5" y="165" width="14.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1052.50" y="175.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (13 samples, 0.09%)</title><rect x="1188.3" y="213" width="1.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1191.27" y="223.5" ></text>
</g>
<g >
<title>runtime.(*bmap).overflow (4 samples, 0.03%)</title><rect x="492.9" y="213" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="495.94" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (2 samples, 0.01%)</title><rect x="15.8" y="149" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="18.76" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).trigger (2 samples, 0.01%)</title><rect x="189.3" y="165" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="192.32" y="175.5" ></text>
</g>
<g >
<title>runtime.finishsweep_m (5 samples, 0.03%)</title><rect x="188.8" y="133" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="191.83" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (2 samples, 0.01%)</title><rect x="14.9" y="197" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="17.85" y="207.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (8 samples, 0.06%)</title><rect x="16.2" y="229" width="0.6" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="19.17" y="239.5" ></text>
</g>
<g >
<title>aeshashbody (473 samples, 3.30%)</title><rect x="683.0" y="197" width="38.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="686.04" y="207.5" >aes..</text>
</g>
<g >
<title>runtime.gcMarkTermination (2 samples, 0.01%)</title><rect x="16.4" y="213" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="19.42" y="223.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (5 samples, 0.03%)</title><rect x="188.8" y="149" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="191.83" y="159.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.01%)</title><rect x="1188.8" y="149" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.77" y="159.5" ></text>
</g>
<g >
<title>strings.TrimRightFunc (2 samples, 0.01%)</title><rect x="1117.9" y="181" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1120.94" y="191.5" ></text>
</g>
<g >
<title>unicode.isExcludingLatin (10 samples, 0.07%)</title><rect x="1118.5" y="149" width="0.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1121.52" y="159.5" ></text>
</g>
<g >
<title>runtime.netpoll (2 samples, 0.01%)</title><rect x="1187.1" y="181" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1190.12" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (12 samples, 0.08%)</title><rect x="178.5" y="149" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="181.47" y="159.5" ></text>
</g>
<g >
<title>strconv.atof64exact (788 samples, 5.49%)</title><rect x="839.4" y="165" width="64.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="842.41" y="175.5" >strconv..</text>
</g>
<g >
<title>indexbytebody (374 samples, 2.61%)</title><rect x="399.6" y="181" width="30.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="402.58" y="191.5" >in..</text>
</g>
<g >
<title>runtime.(*spanSet).push (6 samples, 0.04%)</title><rect x="177.2" y="133" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="180.23" y="143.5" ></text>
</g>
<g >
<title>runtime.forEachP (3 samples, 0.02%)</title><rect x="16.2" y="213" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="19.17" y="223.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (2 samples, 0.01%)</title><rect x="1187.1" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1190.12" y="159.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (5 samples, 0.03%)</title><rect x="435.4" y="165" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="438.44" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (2 samples, 0.01%)</title><rect x="10.0" y="165" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (30 samples, 0.21%)</title><rect x="186.4" y="149" width="2.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="189.36" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (33 samples, 0.23%)</title><rect x="174.3" y="101" width="2.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="177.27" y="111.5" ></text>
</g>
<g >
<title>runtime.releasem (39 samples, 0.27%)</title><rect x="249.9" y="197" width="3.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="252.95" y="207.5" ></text>
</g>
<g >
<title>runtime.preemptall (3 samples, 0.02%)</title><rect x="15.9" y="165" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="18.92" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (111 samples, 0.77%)</title><rect x="16.9" y="197" width="9.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="19.91" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 0.03%)</title><rect x="15.8" y="213" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="18.76" y="223.5" ></text>
</g>
<g >
<title>runtime.gcStart (5 samples, 0.03%)</title><rect x="188.8" y="181" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="191.83" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (29 samples, 0.20%)</title><rect x="186.4" y="101" width="2.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="189.44" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (33 samples, 0.23%)</title><rect x="174.3" y="133" width="2.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="177.27" y="143.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (3 samples, 0.02%)</title><rect x="176.4" y="53" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="179.41" y="63.5" ></text>
</g>
<g >
<title>runtime.(*spanSetBlockAlloc).free (3 samples, 0.02%)</title><rect x="189.0" y="117" width="0.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="191.99" y="127.5" ></text>
</g>
<g >
<title>runtime.preemptM (3 samples, 0.02%)</title><rect x="15.9" y="149" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="18.92" y="159.5" ></text>
</g>
<g >
<title>runtime.pallocSum.unpack (3 samples, 0.02%)</title><rect x="12.1" y="117" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="15.06" y="127.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (4 samples, 0.03%)</title><rect x="12.6" y="149" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="15.63" y="159.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).init (4 samples, 0.03%)</title><rect x="17.6" y="149" width="0.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="20.57" y="159.5" ></text>
</g>
<g >
<title>unicode.IsSpace (15 samples, 0.10%)</title><rect x="1118.1" y="165" width="1.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1121.11" y="175.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (2 samples, 0.01%)</title><rect x="437.3" y="101" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="440.25" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (115 samples, 0.80%)</title><rect x="16.8" y="229" width="9.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="19.83" y="239.5" ></text>
</g>
<g >
<title>runtime.madvise (2 samples, 0.01%)</title><rect x="10.0" y="117" width="0.2" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (34 samples, 0.24%)</title><rect x="174.2" y="149" width="2.8" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="177.19" y="159.5" ></text>
</g>
<g >
<title>runtime.sweepone (64 samples, 0.45%)</title><rect x="10.4" y="229" width="5.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="13.41" y="239.5" ></text>
</g>
<g >
<title>runtime.add (224 samples, 1.56%)</title><rect x="493.3" y="213" width="18.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="496.27" y="223.5" ></text>
</g>
<g >
<title>runtime.notesleep (9 samples, 0.06%)</title><rect x="1186.4" y="165" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1189.38" y="175.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByteString (85 samples, 0.59%)</title><rect x="1178.8" y="197" width="7.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1181.81" y="207.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (29 samples, 0.20%)</title><rect x="22.7" y="165" width="2.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="25.67" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).divideByElemSize (3 samples, 0.02%)</title><rect x="21.4" y="165" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="24.35" y="175.5" ></text>
</g>
<g >
<title>runtime.notetsleep (2 samples, 0.01%)</title><rect x="16.3" y="149" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="19.25" y="159.5" ></text>
</g>
<g >
<title>runtime.tgkill (2 samples, 0.01%)</title><rect x="17.2" y="117" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="20.24" y="127.5" ></text>
</g>
<g >
<title>strings.TrimSpace (733 samples, 5.11%)</title><rect x="1064.0" y="213" width="60.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1066.98" y="223.5" >string..</text>
</g>
<g >
<title>runtime.getpid (2 samples, 0.01%)</title><rect x="15.9" y="117" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="18.92" y="127.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (3 samples, 0.02%)</title><rect x="15.0" y="197" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="18.02" y="207.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (3 samples, 0.02%)</title><rect x="16.2" y="165" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="19.17" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (4 samples, 0.03%)</title><rect x="13.3" y="213" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="16.29" y="223.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (2 samples, 0.01%)</title><rect x="1188.1" y="197" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1191.11" y="207.5" ></text>
</g>
<g >
<title>runtime.gcstopm (4 samples, 0.03%)</title><rect x="1188.6" y="165" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1191.60" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1,452 samples, 10.12%)</title><rect x="72.8" y="197" width="119.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="75.85" y="207.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.schedule (12 samples, 0.08%)</title><rect x="1188.3" y="197" width="1.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1191.27" y="207.5" ></text>
</g>
<g >
<title>runtime.futex (8 samples, 0.06%)</title><rect x="1186.5" y="133" width="0.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1189.46" y="143.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).CompareAndSwap (2 samples, 0.01%)</title><rect x="10.8" y="213" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="13.82" y="223.5" ></text>
</g>
<g >
<title>os.(*File).Read (2 samples, 0.01%)</title><rect x="434.8" y="197" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="437.78" y="207.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.EpollWait (2 samples, 0.01%)</title><rect x="1187.1" y="165" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1190.12" y="175.5" ></text>
</g>
<g >
<title>runtime.(*bmap).keys (22 samples, 0.15%)</title><rect x="491.1" y="213" width="1.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="494.13" y="223.5" ></text>
</g>
<g >
<title>runtime.memmove (283 samples, 1.97%)</title><rect x="192.3" y="197" width="23.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="195.29" y="207.5" >r..</text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (5 samples, 0.03%)</title><rect x="15.8" y="197" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="18.76" y="207.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).reset (2 samples, 0.01%)</title><rect x="188.8" y="117" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="191.83" y="127.5" ></text>
</g>
<g >
<title>runtime.futex (2 samples, 0.01%)</title><rect x="1188.6" y="101" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1191.60" y="111.5" ></text>
</g>
<g >
<title>all (14,345 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.tophash (7 samples, 0.05%)</title><rect x="775.5" y="213" width="0.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="778.50" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (28 samples, 0.20%)</title><rect x="11.0" y="213" width="2.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="13.99" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (2 samples, 0.01%)</title><rect x="16.3" y="133" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="19.25" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (2 samples, 0.01%)</title><rect x="10.0" y="197" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (5 samples, 0.03%)</title><rect x="435.0" y="181" width="0.4" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="438.03" y="191.5" ></text>
</g>
<g >
<title>unicode/utf8.DecodeLastRuneInString (25 samples, 0.17%)</title><rect x="1120.9" y="165" width="2.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1123.90" y="175.5" ></text>
</g>
<g >
<title>runtime.park_m (30 samples, 0.21%)</title><rect x="1185.8" y="229" width="2.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1188.80" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (5 samples, 0.03%)</title><rect x="188.8" y="165" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="191.83" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.01%)</title><rect x="17.2" y="181" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="20.24" y="191.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (4 samples, 0.03%)</title><rect x="1189.3" y="213" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1192.34" y="223.5" ></text>
</g>
<g >
<title>runtime.main (14,095 samples, 98.26%)</title><rect x="26.4" y="245" width="1159.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="29.37" y="255.5" >runtime.main</text>
</g>
<g >
<title>runtime.gopreempt_m (17 samples, 0.12%)</title><rect x="1188.3" y="229" width="1.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1191.27" y="239.5" ></text>
</g>
<g >
<title>runtime.markrootSpans (3 samples, 0.02%)</title><rect x="18.2" y="165" width="0.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="21.23" y="175.5" ></text>
</g>
<g >
<title>runtime.futexsleep (2 samples, 0.01%)</title><rect x="16.3" y="117" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="19.25" y="127.5" ></text>
</g>
<g >
<title>os.(*File).read (614 samples, 4.28%)</title><rect x="435.0" y="197" width="50.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="438.03" y="207.5" >os.(*..</text>
</g>
<g >
<title>bytes.IndexByte (469 samples, 3.27%)</title><rect x="396.1" y="197" width="38.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="399.12" y="207.5" >byt..</text>
</g>
<g >
<title>runtime.exitsyscallfast (6 samples, 0.04%)</title><rect x="437.4" y="117" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="440.42" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.02%)</title><rect x="16.2" y="197" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="19.17" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (86 samples, 0.60%)</title><rect x="172.4" y="181" width="7.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="175.38" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachP (5 samples, 0.03%)</title><rect x="15.8" y="229" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="18.76" y="239.5" ></text>
</g>
<g >
<title>runtime.findRunnable (10 samples, 0.07%)</title><rect x="1188.4" y="181" width="0.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1191.44" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (12 samples, 0.08%)</title><rect x="175.3" y="53" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="178.34" y="63.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (29 samples, 0.20%)</title><rect x="186.4" y="117" width="2.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="189.44" y="127.5" ></text>
</g>
<g >
<title>runtime.alignUp (101 samples, 0.70%)</title><rect x="59.5" y="197" width="8.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="62.52" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (4 samples, 0.03%)</title><rect x="11.6" y="117" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="14.65" y="127.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func2 (2 samples, 0.01%)</title><rect x="16.6" y="197" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="19.58" y="207.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (2 samples, 0.01%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (10 samples, 0.07%)</title><rect x="11.6" y="133" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.56" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (4 samples, 0.03%)</title><rect x="1187.8" y="197" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1190.78" y="207.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.02%)</title><rect x="13.0" y="165" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="15.96" y="175.5" ></text>
</g>
<g >
<title>runtime.sysUnused (2 samples, 0.01%)</title><rect x="10.0" y="149" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (10 samples, 0.07%)</title><rect x="25.2" y="181" width="0.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="28.22" y="191.5" ></text>
</g>
<g >
<title>runtime.futex (2 samples, 0.01%)</title><rect x="16.3" y="101" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="19.25" y="111.5" ></text>
</g>
<g >
<title>runtime.entersyscall (8 samples, 0.06%)</title><rect x="435.9" y="133" width="0.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="438.94" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).memoryLimitHeapGoal (2 samples, 0.01%)</title><rect x="189.3" y="133" width="0.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="192.32" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (3 samples, 0.02%)</title><rect x="176.1" y="37" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="179.08" y="47.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (2 samples, 0.01%)</title><rect x="17.7" y="117" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="20.73" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (6 samples, 0.04%)</title><rect x="177.2" y="149" width="0.5" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="180.23" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (3 samples, 0.02%)</title><rect x="26.0" y="213" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="29.04" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep (2 samples, 0.01%)</title><rect x="15.8" y="165" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="18.76" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (56 samples, 0.39%)</title><rect x="173.2" y="165" width="4.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="176.20" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.01%)</title><rect x="17.2" y="149" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="20.24" y="159.5" ></text>
</g>
<g >
<title>strconv.commonPrefixLenIgnoreCase (11 samples, 0.08%)</title><rect x="904.2" y="165" width="0.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="907.23" y="175.5" ></text>
</g>
<g >
<title>strings.lastIndexFunc (2 samples, 0.01%)</title><rect x="1117.9" y="165" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1120.94" y="175.5" ></text>
</g>
<g >
<title>bufio.dropCR (74 samples, 0.52%)</title><rect x="390.0" y="197" width="6.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="393.03" y="207.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (5 samples, 0.03%)</title><rect x="174.6" y="53" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="177.60" y="63.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readLock (5 samples, 0.03%)</title><rect x="435.4" y="181" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="438.44" y="191.5" ></text>
</g>
<g >
<title>strings.TrimRightFunc (60 samples, 0.42%)</title><rect x="1119.3" y="197" width="5.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1122.34" y="207.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (129 samples, 0.90%)</title><rect x="15.7" y="245" width="10.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="18.68" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (29 samples, 0.20%)</title><rect x="186.4" y="133" width="2.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="189.44" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (20 samples, 0.14%)</title><rect x="177.8" y="165" width="1.7" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="180.81" y="175.5" ></text>
</g>
<g >
<title>runtime.greyobject (2 samples, 0.01%)</title><rect x="21.9" y="165" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="24.93" y="175.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.02%)</title><rect x="485.5" y="197" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="488.54" y="207.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readUnlock (3 samples, 0.02%)</title><rect x="435.2" y="165" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="438.19" y="175.5" ></text>
</g>
<g >
<title>strings.Index (748 samples, 5.21%)</title><rect x="1124.3" y="229" width="61.5" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1127.28" y="239.5" >string..</text>
</g>
<g >
<title>runtime.gcAssistAlloc (30 samples, 0.21%)</title><rect x="186.4" y="165" width="2.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="189.36" y="175.5" ></text>
</g>
</g>
</svg>
