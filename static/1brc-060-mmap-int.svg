<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>runtime.gcTrigger.test (7 samples, 0.02%)</title><rect x="1055.3" y="197" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1058.34" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (116 samples, 0.39%)</title><rect x="1036.9" y="181" width="4.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1039.87" y="191.5" ></text>
</g>
<g >
<title>golang.org/x/exp/mmap.(*ReaderAt).ReadAt (526 samples, 1.78%)</title><rect x="265.5" y="229" width="21.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="268.48" y="239.5" ></text>
</g>
<g >
<title>runtime.releasem (207 samples, 0.70%)</title><rect x="1122.5" y="213" width="8.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1125.53" y="223.5" ></text>
</g>
<g >
<title>runtime.main (3 samples, 0.01%)</title><rect x="1189.5" y="245" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1192.52" y="255.5" ></text>
</g>
<g >
<title>runtime.morestack (4 samples, 0.01%)</title><rect x="1189.7" y="245" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1192.72" y="255.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (3 samples, 0.01%)</title><rect x="1038.0" y="69" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1040.99" y="79.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (4 samples, 0.01%)</title><rect x="1189.7" y="229" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1192.72" y="239.5" ></text>
</g>
<g >
<title>main.parseTempToInt (1,321 samples, 4.48%)</title><rect x="1131.7" y="245" width="52.8" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1134.69" y="255.5" >main...</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (33 samples, 0.11%)</title><rect x="1186.0" y="181" width="1.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1189.00" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (65 samples, 0.22%)</title><rect x="1037.8" y="149" width="2.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1040.79" y="159.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (770 samples, 2.61%)</title><rect x="1091.7" y="213" width="30.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1094.74" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (9 samples, 0.03%)</title><rect x="1038.2" y="53" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1041.19" y="63.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (36 samples, 0.12%)</title><rect x="1188.0" y="165" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1191.04" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (37 samples, 0.13%)</title><rect x="1188.0" y="197" width="1.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1191.04" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (230 samples, 0.78%)</title><rect x="326.3" y="213" width="9.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="329.27" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (7 samples, 0.02%)</title><rect x="326.3" y="101" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="329.31" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (65 samples, 0.22%)</title><rect x="1037.8" y="117" width="2.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1040.79" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).partialSwept (3 samples, 0.01%)</title><rect x="1040.9" y="165" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1043.91" y="175.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (3 samples, 0.01%)</title><rect x="1187.9" y="197" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1190.88" y="207.5" ></text>
</g>
<g >
<title>runtime.strhash (162 samples, 0.55%)</title><rect x="802.8" y="213" width="6.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="805.79" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (16 samples, 0.05%)</title><rect x="1186.4" y="133" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1189.36" y="143.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (10 samples, 0.03%)</title><rect x="1041.1" y="149" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1044.11" y="159.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (26 samples, 0.09%)</title><rect x="1184.5" y="197" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1187.52" y="207.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4,244 samples, 14.38%)</title><rect x="887.8" y="213" width="169.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="890.77" y="223.5" >runtime.mallocgc</text>
</g>
<g >
<title>runtime.add (752 samples, 2.55%)</title><rect x="288.8" y="229" width="30.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="291.83" y="239.5" >ru..</text>
</g>
<g >
<title>runtime.acquirem (499 samples, 1.69%)</title><rect x="849.5" y="213" width="20.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="852.50" y="223.5" ></text>
</g>
<g >
<title>runtime.strhash (198 samples, 0.67%)</title><rect x="511.1" y="213" width="7.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="514.08" y="223.5" ></text>
</g>
<g >
<title>runtime.sysUnused (7 samples, 0.02%)</title><rect x="326.3" y="85" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="329.31" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).trigger (4 samples, 0.01%)</title><rect x="1055.5" y="181" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1058.46" y="191.5" ></text>
</g>
<g >
<title>runtime.suspendG (32 samples, 0.11%)</title><rect x="1188.2" y="149" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1191.20" y="159.5" ></text>
</g>
<g >
<title>runtime.(*consistentHeapStats).acquire (3 samples, 0.01%)</title><rect x="1037.5" y="165" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1040.51" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (33 samples, 0.11%)</title><rect x="1186.0" y="197" width="1.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1189.00" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).reclaim (4 samples, 0.01%)</title><rect x="1040.1" y="85" width="0.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1043.15" y="95.5" ></text>
</g>
<g >
<title>runtime.makeslice (230 samples, 0.78%)</title><rect x="326.3" y="229" width="9.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="329.27" y="239.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (3 samples, 0.01%)</title><rect x="1041.3" y="133" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1044.35" y="143.5" ></text>
</g>
<g >
<title>runtime.mapaccess2_faststr (7,258 samples, 24.60%)</title><rect x="519.0" y="229" width="290.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="521.99" y="239.5" >runtime.mapaccess2_faststr</text>
</g>
<g >
<title>main.(*Measurements).Add (1,183 samples, 4.01%)</title><rect x="10.0" y="245" width="47.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >main..</text>
</g>
<g >
<title>runtime.divRoundUp (6 samples, 0.02%)</title><rect x="879.0" y="213" width="0.3" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="882.01" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).memoryLimitHeapGoal (3 samples, 0.01%)</title><rect x="1055.5" y="149" width="0.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1058.50" y="159.5" ></text>
</g>
<g >
<title>runtime.tophash (20 samples, 0.07%)</title><rect x="1130.8" y="229" width="0.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1133.81" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (37 samples, 0.13%)</title><rect x="1188.0" y="213" width="1.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1191.04" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (9 samples, 0.03%)</title><rect x="326.3" y="197" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="329.27" y="207.5" ></text>
</g>
<g >
<title>runtime.memmove (856 samples, 2.90%)</title><rect x="1057.5" y="213" width="34.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1060.50" y="223.5" >ru..</text>
</g>
<g >
<title>aeshashbody (1,322 samples, 4.48%)</title><rect x="702.4" y="213" width="52.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="705.44" y="223.5" >aesha..</text>
</g>
<g >
<title>runtime.(*scavengerState).run (26 samples, 0.09%)</title><rect x="1184.5" y="229" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1187.52" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (33 samples, 0.11%)</title><rect x="1186.0" y="213" width="1.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1189.00" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (8 samples, 0.03%)</title><rect x="326.3" y="149" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="329.31" y="159.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (26 samples, 0.09%)</title><rect x="1184.5" y="245" width="1.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1187.52" y="255.5" ></text>
</g>
<g >
<title>runtime.markroot (36 samples, 0.12%)</title><rect x="1188.0" y="181" width="1.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1191.04" y="191.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (220 samples, 0.75%)</title><rect x="326.7" y="181" width="8.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="329.67" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (13 samples, 0.04%)</title><rect x="1186.4" y="117" width="0.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1189.44" y="127.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (220 samples, 0.75%)</title><rect x="326.7" y="197" width="8.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="329.67" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (8 samples, 0.03%)</title><rect x="1038.7" y="53" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1041.71" y="63.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (4 samples, 0.01%)</title><rect x="1040.5" y="149" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1043.55" y="159.5" ></text>
</g>
<g >
<title>runtime.bucketMask (84 samples, 0.28%)</title><rect x="319.2" y="229" width="3.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="322.23" y="239.5" ></text>
</g>
<g >
<title>runtime.sysUnused (26 samples, 0.09%)</title><rect x="1184.5" y="149" width="1.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1187.52" y="159.5" ></text>
</g>
<g >
<title>runtime.getMCache (212 samples, 0.72%)</title><rect x="879.3" y="213" width="8.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="882.25" y="223.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (26 samples, 0.09%)</title><rect x="1184.5" y="213" width="1.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1187.52" y="223.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (3 samples, 0.01%)</title><rect x="1039.6" y="53" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1042.63" y="63.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (26 samples, 0.09%)</title><rect x="1184.5" y="165" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1187.52" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (12 samples, 0.04%)</title><rect x="1041.0" y="165" width="0.5" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1044.03" y="175.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (12 samples, 0.04%)</title><rect x="1187.5" y="213" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1190.52" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (23 samples, 0.08%)</title><rect x="1041.5" y="181" width="0.9" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1044.51" y="191.5" ></text>
</g>
<g >
<title>runtime.bgsweep (62 samples, 0.21%)</title><rect x="1185.6" y="245" width="2.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1188.56" y="255.5" ></text>
</g>
<g >
<title>runtime.memequal (137 samples, 0.46%)</title><rect x="797.3" y="213" width="5.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="800.31" y="223.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (8 samples, 0.03%)</title><rect x="318.9" y="229" width="0.3" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="321.91" y="239.5" ></text>
</g>
<g >
<title>all (29,505 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (7 samples, 0.02%)</title><rect x="326.3" y="117" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="329.31" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (8 samples, 0.03%)</title><rect x="326.3" y="181" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="329.31" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (27 samples, 0.09%)</title><rect x="1186.0" y="165" width="1.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1189.00" y="175.5" ></text>
</g>
<g >
<title>runtime.newAllocBits (3 samples, 0.01%)</title><rect x="1040.0" y="69" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1043.03" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (31 samples, 0.11%)</title><rect x="1038.5" y="69" width="1.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1041.55" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (3 samples, 0.01%)</title><rect x="1187.3" y="213" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1190.32" y="223.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (7 samples, 0.02%)</title><rect x="326.3" y="69" width="0.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="329.31" y="79.5" ></text>
</g>
<g >
<title>runtime.sweepone (61 samples, 0.21%)</title><rect x="1185.6" y="229" width="2.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1188.60" y="239.5" ></text>
</g>
<g >
<title>aeshashbody (1,206 samples, 4.09%)</title><rect x="435.4" y="213" width="48.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="438.37" y="223.5" >aesh..</text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (3 samples, 0.01%)</title><rect x="1040.5" y="133" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1043.55" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (59 samples, 0.20%)</title><rect x="1037.8" y="85" width="2.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1040.79" y="95.5" ></text>
</g>
<g >
<title>runtime.alignUp (239 samples, 0.81%)</title><rect x="869.5" y="213" width="9.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="872.45" y="223.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (18 samples, 0.06%)</title><rect x="1186.3" y="149" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1189.32" y="159.5" ></text>
</g>
<g >
<title>runtime.madvise (26 samples, 0.09%)</title><rect x="1184.5" y="117" width="1.1" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1187.52" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (9 samples, 0.03%)</title><rect x="1038.2" y="69" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1041.19" y="79.5" ></text>
</g>
<g >
<title>main.aggregate (26,862 samples, 91.04%)</title><rect x="57.3" y="245" width="1074.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="60.31" y="255.5" >main.aggregate</text>
</g>
<g >
<title>runtime.newArenaMayUnlock (3 samples, 0.01%)</title><rect x="1039.6" y="37" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1042.63" y="47.5" ></text>
</g>
<g >
<title>runtime.systemstack (26 samples, 0.09%)</title><rect x="1184.5" y="181" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1187.52" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (15 samples, 0.05%)</title><rect x="1039.0" y="53" width="0.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1042.03" y="63.5" ></text>
</g>
<g >
<title>runtime.(*activeSweep).begin (5 samples, 0.02%)</title><rect x="1037.3" y="165" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1040.31" y="175.5" ></text>
</g>
<g >
<title>runtime.mapaccess1_faststr (4,589 samples, 15.55%)</title><rect x="335.5" y="229" width="183.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="338.46" y="239.5" >runtime.mapaccess1_fast..</text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (3 samples, 0.01%)</title><rect x="1040.4" y="149" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1043.39" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).heapGoalInternal (3 samples, 0.01%)</title><rect x="1055.5" y="165" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1058.50" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (65 samples, 0.22%)</title><rect x="1037.8" y="101" width="2.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1040.79" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (8 samples, 0.03%)</title><rect x="1042.1" y="165" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1045.11" y="175.5" ></text>
</g>
<g >
<title>runtime.(*bmap).keys (31 samples, 0.11%)</title><rect x="286.5" y="229" width="1.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="289.51" y="239.5" ></text>
</g>
<g >
<title>runtime.memmove (526 samples, 1.78%)</title><rect x="265.5" y="213" width="21.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="268.48" y="223.5" ></text>
</g>
<g >
<title>runtime.procyield (26 samples, 0.09%)</title><rect x="1188.4" y="133" width="1.1" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1191.44" y="143.5" ></text>
</g>
<g >
<title>runtime.madvise (7 samples, 0.02%)</title><rect x="326.3" y="53" width="0.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="329.31" y="63.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (26 samples, 0.09%)</title><rect x="1184.5" y="133" width="1.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1187.52" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (80 samples, 0.27%)</title><rect x="1037.7" y="165" width="3.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1040.67" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (8 samples, 0.03%)</title><rect x="326.3" y="165" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="329.31" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mheap).reclaimChunk (3 samples, 0.01%)</title><rect x="1040.1" y="69" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1043.15" y="79.5" ></text>
</g>
<g >
<title>runtime.bucketShift (91 samples, 0.31%)</title><rect x="322.6" y="229" width="3.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="325.59" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (37 samples, 0.13%)</title><rect x="1188.0" y="229" width="1.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1191.04" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (65 samples, 0.22%)</title><rect x="1037.8" y="133" width="2.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1040.79" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (152 samples, 0.52%)</title><rect x="1036.3" y="197" width="6.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1039.35" y="207.5" ></text>
</g>
<g >
<title>runtime.osyield (5 samples, 0.02%)</title><rect x="1188.2" y="133" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1191.24" y="143.5" ></text>
</g>
<g >
<title>memeqbody (575 samples, 1.95%)</title><rect x="483.6" y="213" width="23.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="486.60" y="223.5" >m..</text>
</g>
<g >
<title>runtime.(*bmap).overflow (27 samples, 0.09%)</title><rect x="287.8" y="229" width="1.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="290.75" y="239.5" ></text>
</g>
<g >
<title>runtime.deductSweepCredit (3 samples, 0.01%)</title><rect x="1040.7" y="149" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1043.75" y="159.5" ></text>
</g>
<g >
<title>memeqbody (1,049 samples, 3.56%)</title><rect x="755.3" y="213" width="42.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="758.31" y="223.5" >mem..</text>
</g>
<g >
<title>runtime.deductAssistCredit (319 samples, 1.08%)</title><rect x="1042.6" y="197" width="12.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1045.58" y="207.5" ></text>
</g>
<g >
<title>runtime.memequal (112 samples, 0.38%)</title><rect x="506.6" y="213" width="4.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="509.60" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (7 samples, 0.02%)</title><rect x="326.3" y="133" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="329.31" y="143.5" ></text>
</g>
<g >
<title>runtime.slicebytetostring (8,037 samples, 27.24%)</title><rect x="809.4" y="229" width="321.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="812.38" y="239.5" >runtime.slicebytetostring</text>
</g>
<g >
<title>runtime.gcBgMarkWorker (37 samples, 0.13%)</title><rect x="1188.0" y="245" width="1.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1191.04" y="255.5" ></text>
</g>
<g >
<title>runtime.publicationBarrier (44 samples, 0.15%)</title><rect x="1055.7" y="197" width="1.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1058.74" y="207.5" ></text>
</g>
</g>
</svg>
