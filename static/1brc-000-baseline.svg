<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>runtime.notesleep (5 samples, 0.02%)</title><rect x="1189.0" y="213" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.99" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (8 samples, 0.03%)</title><rect x="318.2" y="133" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="321.21" y="143.5" ></text>
</g>
<g >
<title>countbody (469 samples, 1.91%)</title><rect x="1162.6" y="229" width="22.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1165.56" y="239.5" >c..</text>
</g>
<g >
<title>runtime.makeSpanClass (35 samples, 0.14%)</title><rect x="964.8" y="229" width="1.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="967.82" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (160 samples, 0.65%)</title><rect x="1042.3" y="133" width="7.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1045.32" y="143.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (168 samples, 0.69%)</title><rect x="1115.8" y="213" width="8.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1118.82" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (16 samples, 0.07%)</title><rect x="1052.8" y="165" width="0.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1055.76" y="175.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (23 samples, 0.09%)</title><rect x="10.0" y="293" width="1.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge (23 samples, 0.09%)</title><rect x="10.0" y="245" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.memmove (422 samples, 1.72%)</title><rect x="768.1" y="245" width="20.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="771.09" y="255.5" ></text>
</g>
<g >
<title>runtime.publicationBarrier (16 samples, 0.07%)</title><rect x="1123.9" y="213" width="0.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1126.91" y="223.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).pop (3 samples, 0.01%)</title><rect x="18.3" y="245" width="0.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="21.28" y="255.5" ></text>
</g>
<g >
<title>bufio.(*Reader).ReadSlice (1,577 samples, 6.43%)</title><rect x="109.8" y="229" width="75.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="112.83" y="239.5" >bufio.(*..</text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (23 samples, 0.09%)</title><rect x="1053.6" y="197" width="1.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1056.58" y="207.5" ></text>
</g>
<g >
<title>runtime.park_m (12 samples, 0.05%)</title><rect x="1189.0" y="277" width="0.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1191.99" y="287.5" ></text>
</g>
<g >
<title>runtime.publicationBarrier (27 samples, 0.11%)</title><rect x="325.0" y="181" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="328.05" y="191.5" ></text>
</g>
<g >
<title>runtime.morestack (3 samples, 0.01%)</title><rect x="1189.6" y="293" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1192.57" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mLockProfile).recordUnlock (4 samples, 0.02%)</title><rect x="17.2" y="181" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="20.22" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (53 samples, 0.22%)</title><rect x="1046.4" y="69" width="2.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1049.41" y="79.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (54 samples, 0.22%)</title><rect x="1043.1" y="69" width="2.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1046.14" y="79.5" ></text>
</g>
<g >
<title>syscall.read (1,043 samples, 4.25%)</title><rect x="135.4" y="165" width="50.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="138.39" y="175.5" >sysca..</text>
</g>
<g >
<title>runtime.futex (5 samples, 0.02%)</title><rect x="1189.0" y="181" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1191.99" y="191.5" ></text>
</g>
<g >
<title>runtime.releasem (68 samples, 0.28%)</title><rect x="1147.6" y="229" width="3.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1150.59" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrain (5 samples, 0.02%)</title><rect x="21.8" y="245" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="24.79" y="255.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint8).Load (4 samples, 0.02%)</title><rect x="135.5" y="117" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="138.49" y="127.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (3 samples, 0.01%)</title><rect x="318.5" y="117" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="321.45" y="127.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (4 samples, 0.02%)</title><rect x="16.5" y="197" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="19.55" y="207.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (5 samples, 0.02%)</title><rect x="1049.3" y="85" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1052.35" y="95.5" ></text>
</g>
<g >
<title>runtime.sysUnusedOS (23 samples, 0.09%)</title><rect x="10.0" y="181" width="1.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>runtime.isEmpty (129 samples, 0.53%)</title><rect x="399.3" y="261" width="6.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="402.32" y="271.5" ></text>
</g>
<g >
<title>runtime.divRoundUp (20 samples, 0.08%)</title><rect x="350.7" y="213" width="0.9" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="353.66" y="223.5" ></text>
</g>
<g >
<title>runtime.tophash (30 samples, 0.12%)</title><rect x="564.3" y="261" width="1.4" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="567.28" y="271.5" ></text>
</g>
<g >
<title>runtime.wirep (5 samples, 0.02%)</title><rect x="136.8" y="101" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="139.79" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (3 samples, 0.01%)</title><rect x="368.4" y="165" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="371.37" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocToCache (3 samples, 0.01%)</title><rect x="1049.2" y="85" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1052.20" y="95.5" ></text>
</g>
<g >
<title>runtime.memmove (40 samples, 0.16%)</title><rect x="351.6" y="213" width="1.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="354.62" y="223.5" ></text>
</g>
<g >
<title>runtime.add (13 samples, 0.05%)</title><rect x="958.8" y="229" width="0.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="961.80" y="239.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (4 samples, 0.02%)</title><rect x="1053.3" y="149" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1056.34" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (54 samples, 0.22%)</title><rect x="14.1" y="213" width="2.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="17.14" y="223.5" ></text>
</g>
<g >
<title>runtime.roundupsize (89 samples, 0.36%)</title><rect x="353.5" y="213" width="4.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="356.54" y="223.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (3 samples, 0.01%)</title><rect x="324.9" y="181" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="327.90" y="191.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (3 samples, 0.01%)</title><rect x="1049.7" y="69" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1052.73" y="79.5" ></text>
</g>
<g >
<title>syscall.Syscall (1,042 samples, 4.25%)</title><rect x="135.4" y="149" width="50.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="138.44" y="159.5" >sysca..</text>
</g>
<g >
<title>runtime.gopreempt_m (3 samples, 0.01%)</title><rect x="1189.6" y="277" width="0.1" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1192.57" y="287.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByteString (104 samples, 0.42%)</title><rect x="895.8" y="229" width="5.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="898.79" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (219 samples, 0.89%)</title><rect x="1042.0" y="181" width="10.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1044.98" y="191.5" ></text>
</g>
<g >
<title>runtime.memmove (559 samples, 2.28%)</title><rect x="372.4" y="245" width="26.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="375.41" y="255.5" >r..</text>
</g>
<g >
<title>unicode/utf8.DecodeRuneInString (14 samples, 0.06%)</title><rect x="834.6" y="197" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="837.57" y="207.5" ></text>
</g>
<g >
<title>strings.(*Builder).String (39 samples, 0.16%)</title><rect x="757.5" y="261" width="1.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="760.50" y="271.5" ></text>
</g>
<g >
<title>runtime.readUintptr (14 samples, 0.06%)</title><rect x="1115.1" y="197" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1118.15" y="207.5" ></text>
</g>
<g >
<title>runtime.madvise (23 samples, 0.09%)</title><rect x="10.0" y="165" width="1.1" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (15 samples, 0.06%)</title><rect x="136.3" y="133" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="139.31" y="143.5" ></text>
</g>
<g >
<title>runtime.bool2int (5 samples, 0.02%)</title><rect x="253.1" y="197" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="256.09" y="207.5" ></text>
</g>
<g >
<title>runtime.add (148 samples, 0.60%)</title><rect x="359.5" y="261" width="7.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="362.47" y="271.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (1,072 samples, 4.37%)</title><rect x="134.1" y="213" width="51.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="137.14" y="223.5" >bufio..</text>
</g>
<g >
<title>indexbytebody (390 samples, 1.59%)</title><rect x="877.0" y="229" width="18.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="880.02" y="239.5" ></text>
</g>
<g >
<title>strconv.atof64exact (833 samples, 3.40%)</title><rect x="609.7" y="213" width="40.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="612.68" y="223.5" >str..</text>
</g>
<g >
<title>strconv.special (181 samples, 0.74%)</title><rect x="748.8" y="213" width="8.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="751.79" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (69 samples, 0.28%)</title><rect x="314.7" y="149" width="3.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="317.70" y="159.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readUnlock (5 samples, 0.02%)</title><rect x="134.9" y="165" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="137.86" y="175.5" ></text>
</g>
<g >
<title>indexbytebody (349 samples, 1.42%)</title><rect x="188.0" y="213" width="16.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="191.01" y="223.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (448 samples, 1.83%)</title><rect x="326.3" y="197" width="21.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="329.35" y="207.5" >r..</text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (4 samples, 0.02%)</title><rect x="17.6" y="245" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="20.56" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (159 samples, 0.65%)</title><rect x="1042.4" y="117" width="7.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1045.37" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (61 samples, 0.25%)</title><rect x="315.1" y="85" width="2.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="318.08" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mspan).countAlloc (11 samples, 0.04%)</title><rect x="18.4" y="261" width="0.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="21.42" y="271.5" ></text>
</g>
<g >
<title>runtime.memequal (33 samples, 0.13%)</title><rect x="560.2" y="245" width="1.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="563.19" y="255.5" ></text>
</g>
<g >
<title>runtime.acquirem (78 samples, 0.32%)</title><rect x="955.0" y="229" width="3.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="958.05" y="239.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (3 samples, 0.01%)</title><rect x="317.8" y="53" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="320.83" y="63.5" ></text>
</g>
<g >
<title>aeshashbody (490 samples, 2.00%)</title><rect x="505.8" y="245" width="23.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="508.75" y="255.5" >a..</text>
</g>
<g >
<title>runtime.newAllocBits (6 samples, 0.02%)</title><rect x="1049.6" y="85" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1052.59" y="95.5" ></text>
</g>
<g >
<title>strconv.atof64 (3,588 samples, 14.64%)</title><rect x="584.8" y="229" width="172.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="587.79" y="239.5" >strconv.atof64</text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (5 samples, 0.02%)</title><rect x="314.4" y="149" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="317.41" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (4 samples, 0.02%)</title><rect x="16.7" y="213" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="19.74" y="223.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (3 samples, 0.01%)</title><rect x="1049.6" y="69" width="0.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1052.59" y="79.5" ></text>
</g>
<g >
<title>bytes.IndexByte (456 samples, 1.86%)</title><rect x="185.7" y="229" width="22.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="188.74" y="239.5" >b..</text>
</g>
<g >
<title>strings.TrimSpace (920 samples, 3.75%)</title><rect x="791.7" y="261" width="44.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="794.68" y="271.5" >stri..</text>
</g>
<g >
<title>unicode/utf8.DecodeRuneInString (14 samples, 0.06%)</title><rect x="835.3" y="229" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="838.29" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (9 samples, 0.04%)</title><rect x="318.2" y="149" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="321.17" y="159.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (5 samples, 0.02%)</title><rect x="19.9" y="245" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="22.92" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (74 samples, 0.30%)</title><rect x="13.9" y="261" width="3.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="16.90" y="271.5" ></text>
</g>
<g >
<title>internal/bytealg.CountString (79 samples, 0.32%)</title><rect x="1185.1" y="229" width="3.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1188.14" y="239.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (18 samples, 0.07%)</title><rect x="15.1" y="181" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="18.10" y="191.5" ></text>
</g>
<g >
<title>runtime.markroot (4 samples, 0.02%)</title><rect x="21.5" y="229" width="0.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="24.46" y="239.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.01%)</title><rect x="368.4" y="197" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="371.37" y="207.5" ></text>
</g>
<g >
<title>unicode.IsSpace (10 samples, 0.04%)</title><rect x="831.8" y="213" width="0.5" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="834.77" y="223.5" ></text>
</g>
<g >
<title>os.(*File).read (1,056 samples, 4.31%)</title><rect x="134.8" y="197" width="50.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="137.77" y="207.5" >os.(*..</text>
</g>
<g >
<title>runtime.makeslice (4,268 samples, 17.41%)</title><rect x="945.4" y="245" width="205.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="948.42" y="255.5" >runtime.makeslice</text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (61 samples, 0.25%)</title><rect x="315.1" y="69" width="2.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="318.08" y="79.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3 samples, 0.01%)</title><rect x="368.4" y="245" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="371.37" y="255.5" ></text>
</g>
<g >
<title>unicode.is16 (5 samples, 0.02%)</title><rect x="832.0" y="181" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="835.01" y="191.5" ></text>
</g>
<g >
<title>strings.lastIndexFunc (3 samples, 0.01%)</title><rect x="831.5" y="213" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="834.53" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (12 samples, 0.05%)</title><rect x="318.9" y="149" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="321.94" y="159.5" ></text>
</g>
<g >
<title>internal/bytealg.MakeNoZero (2,384 samples, 9.73%)</title><rect x="235.9" y="213" width="114.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="238.90" y="223.5" >internal/bytea..</text>
</g>
<g >
<title>runtime.(*mheap).alloc (3 samples, 0.01%)</title><rect x="368.4" y="213" width="0.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="371.37" y="223.5" ></text>
</g>
<g >
<title>strings.TrimFunc (21 samples, 0.09%)</title><rect x="831.2" y="245" width="1.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="834.24" y="255.5" ></text>
</g>
<g >
<title>strings.(*Builder).Write (603 samples, 2.46%)</title><rect x="759.4" y="261" width="29.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="762.38" y="271.5" >st..</text>
</g>
<g >
<title>runtime.sweepone (211 samples, 0.86%)</title><rect x="11.3" y="277" width="10.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="14.30" y="287.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (3 samples, 0.01%)</title><rect x="1049.0" y="69" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1051.96" y="79.5" ></text>
</g>
<g >
<title>runtime.systemstack (61 samples, 0.25%)</title><rect x="315.1" y="101" width="2.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="318.08" y="111.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.01%)</title><rect x="21.6" y="229" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="24.65" y="239.5" ></text>
</g>
<g >
<title>runtime.newArenaMayUnlock (3 samples, 0.01%)</title><rect x="1049.7" y="53" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1052.73" y="63.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (81 samples, 0.33%)</title><rect x="368.5" y="245" width="3.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="371.52" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (23 samples, 0.09%)</title><rect x="1107.6" y="181" width="1.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1110.59" y="191.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bytep (4 samples, 0.02%)</title><rect x="1042.1" y="165" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1045.13" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (301 samples, 1.23%)</title><rect x="1040.2" y="213" width="14.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1043.20" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (71 samples, 0.29%)</title><rect x="1045.7" y="85" width="3.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1048.74" y="95.5" ></text>
</g>
<g >
<title>os.(*File).Read (6 samples, 0.02%)</title><rect x="134.5" y="197" width="0.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="137.48" y="207.5" ></text>
</g>
<g >
<title>internal/abi.(*Type).Pointers (11 samples, 0.04%)</title><rect x="954.5" y="229" width="0.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="957.52" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (7 samples, 0.03%)</title><rect x="21.5" y="261" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="24.46" y="271.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (125 samples, 0.51%)</title><rect x="1054.7" y="213" width="6.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1057.69" y="223.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (6 samples, 0.02%)</title><rect x="14.6" y="197" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="17.62" y="207.5" ></text>
</g>
<g >
<title>runtime.mcall (13 samples, 0.05%)</title><rect x="1188.9" y="293" width="0.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1191.94" y="303.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (7 samples, 0.03%)</title><rect x="1041.3" y="181" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1044.26" y="191.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwlock (6 samples, 0.02%)</title><rect x="135.1" y="165" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="138.10" y="175.5" ></text>
</g>
<g >
<title>runtime.growslice (643 samples, 2.62%)</title><rect x="368.4" y="261" width="30.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="371.37" y="271.5" >ru..</text>
</g>
<g >
<title>bufio.(*Reader).ReadString (5,665 samples, 23.11%)</title><rect x="86.8" y="261" width="272.7" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="89.78" y="271.5" >bufio.(*Reader).ReadString</text>
</g>
<g >
<title>runtime.divRoundUp (12 samples, 0.05%)</title><rect x="959.9" y="229" width="0.5" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="962.86" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (97 samples, 0.40%)</title><rect x="313.9" y="165" width="4.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="316.93" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (206 samples, 0.84%)</title><rect x="1042.3" y="165" width="9.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1045.32" y="175.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.01%)</title><rect x="185.6" y="197" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="188.60" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (23 samples, 0.09%)</title><rect x="10.0" y="229" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.strhash (52 samples, 0.21%)</title><rect x="561.8" y="245" width="2.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="564.78" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (54 samples, 0.22%)</title><rect x="1043.1" y="85" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1046.14" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (19 samples, 0.08%)</title><rect x="316.8" y="37" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="319.77" y="47.5" ></text>
</g>
<g >
<title>memeqbody (641 samples, 2.61%)</title><rect x="529.3" y="245" width="30.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="532.34" y="255.5" >me..</text>
</g>
<g >
<title>runtime.(*scavengerState).init.func2 (23 samples, 0.09%)</title><rect x="10.0" y="261" width="1.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.newArenaMayUnlock (3 samples, 0.01%)</title><rect x="1049.0" y="53" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1051.96" y="63.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).Add (7 samples, 0.03%)</title><rect x="1041.6" y="181" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1044.60" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).partialSwept (3 samples, 0.01%)</title><rect x="318.0" y="149" width="0.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="321.02" y="159.5" ></text>
</g>
<g >
<title>runtime.makeSpanClass (25 samples, 0.10%)</title><rect x="255.3" y="197" width="1.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="258.30" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (11 samples, 0.04%)</title><rect x="1054.2" y="181" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1057.16" y="191.5" ></text>
</g>
<g >
<title>runtime.futexsleep (5 samples, 0.02%)</title><rect x="1189.0" y="197" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.99" y="207.5" ></text>
</g>
<g >
<title>strings.(*Builder).grow (2,977 samples, 12.14%)</title><rect x="214.5" y="229" width="143.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="217.53" y="239.5" >strings.(*Builder)..</text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (23 samples, 0.09%)</title><rect x="315.4" y="53" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="318.37" y="63.5" ></text>
</g>
<g >
<title>runtime.acquirem (31 samples, 0.13%)</title><rect x="251.6" y="197" width="1.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="254.59" y="207.5" ></text>
</g>
<g >
<title>runtime.casgstatus (9 samples, 0.04%)</title><rect x="135.8" y="101" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="138.83" y="111.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).CompareAndSwap (4 samples, 0.02%)</title><rect x="13.7" y="261" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="16.71" y="271.5" ></text>
</g>
<g >
<title>strings.Index (724 samples, 2.95%)</title><rect x="866.0" y="261" width="34.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="868.95" y="271.5" >st..</text>
</g>
<g >
<title>internal/poll.(*FD).Read (6 samples, 0.02%)</title><rect x="134.8" y="181" width="0.3" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="137.82" y="191.5" ></text>
</g>
<g >
<title>strings.(*Builder).Grow (3,119 samples, 12.72%)</title><rect x="207.7" y="245" width="150.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="210.69" y="255.5" >strings.(*Builder)...</text>
</g>
<g >
<title>strings.genSplit (5,986 samples, 24.42%)</title><rect x="900.8" y="261" width="288.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="903.80" y="271.5" >strings.genSplit</text>
</g>
<g >
<title>runtime.unlock2 (8 samples, 0.03%)</title><rect x="17.0" y="197" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="20.03" y="207.5" ></text>
</g>
<g >
<title>bufio.(*Reader).collectFragments (2,289 samples, 9.34%)</title><rect x="97.5" y="245" width="110.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="100.51" y="255.5" >bufio.(*Reade..</text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (9 samples, 0.04%)</title><rect x="15.3" y="165" width="0.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="18.34" y="175.5" ></text>
</g>
<g >
<title>runtime.heapBitsSlice (58 samples, 0.24%)</title><rect x="1112.4" y="181" width="2.7" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1115.36" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3 (73 samples, 0.30%)</title><rect x="13.9" y="229" width="3.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="16.90" y="239.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (112 samples, 0.46%)</title><rect x="319.5" y="181" width="5.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="322.51" y="191.5" ></text>
</g>
<g >
<title>runtime.(*scavengerState).run (23 samples, 0.09%)</title><rect x="10.0" y="277" width="1.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>strconv.readFloat (2,040 samples, 8.32%)</title><rect x="650.6" y="213" width="98.2" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="653.59" y="223.5" >strconv.rea..</text>
</g>
<g >
<title>slices.Max[go.shape.[]float32,go.shape.float32] (308 samples, 1.26%)</title><rect x="836.0" y="277" width="14.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="838.96" y="287.5" ></text>
</g>
<g >
<title>all (24,514 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (20 samples, 0.08%)</title><rect x="1052.6" y="181" width="0.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1055.57" y="191.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (1,008 samples, 4.11%)</title><rect x="137.1" y="117" width="48.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="140.08" y="127.5" >inte..</text>
</g>
<g >
<title>runtime.offAddr.lessThan (6 samples, 0.02%)</title><rect x="16.1" y="181" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="19.07" y="191.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (11 samples, 0.04%)</title><rect x="20.4" y="245" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="23.45" y="255.5" ></text>
</g>
<g >
<title>unicode.isExcludingLatin (7 samples, 0.03%)</title><rect x="831.9" y="197" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="834.92" y="207.5" ></text>
</g>
<g >
<title>runtime.reentersyscall (13 samples, 0.05%)</title><rect x="135.7" y="117" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="138.68" y="127.5" ></text>
</g>
<g >
<title>strings.indexFunc (12 samples, 0.05%)</title><rect x="831.7" y="229" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="834.68" y="239.5" ></text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint64).CompareAndSwap (9 samples, 0.04%)</title><rect x="17.7" y="245" width="0.5" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="20.75" y="255.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (43 samples, 0.18%)</title><rect x="1050.2" y="133" width="2.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1053.17" y="143.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (23 samples, 0.09%)</title><rect x="315.4" y="37" width="1.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="318.37" y="47.5" ></text>
</g>
<g >
<title>internal/stringslite.IndexByte (552 samples, 2.25%)</title><rect x="874.2" y="245" width="26.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="877.23" y="255.5" >i..</text>
</g>
<g >
<title>internal/runtime/atomic.(*Uint32).Add (6 samples, 0.02%)</title><rect x="1042.8" y="85" width="0.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1045.75" y="95.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).trigger (3 samples, 0.01%)</title><rect x="324.9" y="165" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="327.90" y="175.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.Syscall6 (3 samples, 0.01%)</title><rect x="1189.2" y="197" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.23" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (12 samples, 0.05%)</title><rect x="21.5" y="277" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="24.46" y="287.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (42 samples, 0.17%)</title><rect x="19.0" y="261" width="2.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="21.95" y="271.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).scavenge.func1 (23 samples, 0.09%)</title><rect x="10.0" y="213" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.entersyscall (17 samples, 0.07%)</title><rect x="135.5" y="133" width="0.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="138.49" y="143.5" ></text>
</g>
<g >
<title>runtime.newArenaMayUnlock (11 samples, 0.04%)</title><rect x="20.4" y="229" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="23.45" y="239.5" ></text>
</g>
<g >
<title>runtime.releasem (57 samples, 0.23%)</title><rect x="347.9" y="197" width="2.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="350.91" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).writeHeapBitsSmall (984 samples, 4.01%)</title><rect x="1067.8" y="197" width="47.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1070.78" y="207.5" >runt..</text>
</g>
<g >
<title>runtime.main (24,242 samples, 98.89%)</title><rect x="22.0" y="293" width="1166.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="25.03" y="303.5" >runtime.main</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (4 samples, 0.02%)</title><rect x="1052.3" y="165" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1055.28" y="175.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByte (60 samples, 0.24%)</title><rect x="204.8" y="213" width="2.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="207.81" y="223.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (8 samples, 0.03%)</title><rect x="17.0" y="213" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="20.03" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (3,286 samples, 13.40%)</title><rect x="966.5" y="229" width="158.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="969.51" y="239.5" >runtime.mallocgc</text>
</g>
<g >
<title>strings.TrimRightFunc (77 samples, 0.31%)</title><rect x="832.3" y="245" width="3.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="835.26" y="255.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.01%)</title><rect x="1052.3" y="149" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1055.33" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (4 samples, 0.02%)</title><rect x="1046.1" y="69" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1049.12" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (61 samples, 0.25%)</title><rect x="315.1" y="117" width="2.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="318.08" y="127.5" ></text>
</g>
<g >
<title>runtime.schedule (12 samples, 0.05%)</title><rect x="1189.0" y="261" width="0.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1191.99" y="271.5" ></text>
</g>
<g >
<title>unicode.IsSpace (7 samples, 0.03%)</title><rect x="833.6" y="213" width="0.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="836.60" y="223.5" ></text>
</g>
<g >
<title>strings.lastIndexFunc (43 samples, 0.18%)</title><rect x="833.2" y="229" width="2.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="836.22" y="239.5" ></text>
</g>
<g >
<title>strings.(*Builder).copyCheck (68 samples, 0.28%)</title><rect x="788.4" y="261" width="3.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="791.40" y="271.5" ></text>
</g>
<g >
<title>strconv.commonPrefixLenIgnoreCase (16 samples, 0.07%)</title><rect x="649.8" y="213" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="652.77" y="223.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (476 samples, 1.94%)</title><rect x="1124.7" y="229" width="22.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1127.68" y="239.5" >r..</text>
</g>
<g >
<title>runtime.sysUnused (23 samples, 0.09%)</title><rect x="10.0" y="197" width="1.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (64 samples, 0.26%)</title><rect x="314.9" y="133" width="3.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="317.94" y="143.5" ></text>
</g>
<g >
<title>runtime.mapassign_faststr (3,298 samples, 13.45%)</title><rect x="405.5" y="261" width="158.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="408.53" y="271.5" >runtime.mapassign_fa..</text>
</g>
<g >
<title>unicode/utf8.DecodeLastRuneInString (27 samples, 0.11%)</title><rect x="833.9" y="213" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="836.94" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (5 samples, 0.02%)</title><rect x="21.8" y="261" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="24.79" y="271.5" ></text>
</g>
<g >
<title>runtime.mPark (5 samples, 0.02%)</title><rect x="1189.0" y="229" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1191.99" y="239.5" ></text>
</g>
<g >
<title>strings.TrimRightFunc (4 samples, 0.02%)</title><rect x="831.5" y="229" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="834.48" y="239.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast (11 samples, 0.04%)</title><rect x="136.5" y="117" width="0.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="139.50" y="127.5" ></text>
</g>
<g >
<title>runtime.bucketMask (35 samples, 0.14%)</title><rect x="366.6" y="261" width="1.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="369.64" y="271.5" ></text>
</g>
<g >
<title>strconv.ParseFloat (3,984 samples, 16.25%)</title><rect x="565.7" y="261" width="191.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="568.73" y="271.5" >strconv.ParseFloat</text>
</g>
<g >
<title>runtime.mallocgc (1,451 samples, 5.92%)</title><rect x="256.5" y="197" width="69.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="259.50" y="207.5" >runtime..</text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (3 samples, 0.01%)</title><rect x="368.4" y="181" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="371.37" y="191.5" ></text>
</g>
<g >
<title>runtime.findRunnable (12 samples, 0.05%)</title><rect x="1189.0" y="245" width="0.6" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1191.99" y="255.5" ></text>
</g>
<g >
<title>strings.Split (6,775 samples, 27.64%)</title><rect x="862.8" y="277" width="326.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="865.82" y="287.5" >strings.Split</text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (3 samples, 0.01%)</title><rect x="368.4" y="229" width="0.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="371.37" y="239.5" ></text>
</g>
<g >
<title>runtime.netpoll (3 samples, 0.01%)</title><rect x="1189.2" y="229" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1192.23" y="239.5" ></text>
</g>
<g >
<title>internal/stringslite.Index (148 samples, 0.60%)</title><rect x="867.1" y="245" width="7.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="870.11" y="255.5" ></text>
</g>
<g >
<title>strconv.parseFloatPrefix (3,742 samples, 15.26%)</title><rect x="577.4" y="245" width="180.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="580.38" y="255.5" >strconv.parseFloatPrefix</text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (19 samples, 0.08%)</title><rect x="318.6" y="165" width="0.9" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="321.60" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (74 samples, 0.30%)</title><rect x="13.9" y="245" width="3.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="16.90" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (265 samples, 1.08%)</title><rect x="1040.8" y="197" width="12.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1043.83" y="207.5" ></text>
</g>
<g >
<title>syscall.Read (1,043 samples, 4.25%)</title><rect x="135.4" y="181" width="50.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="138.39" y="191.5" >sysca..</text>
</g>
<g >
<title>runtime.(*mheap).initSpan (26 samples, 0.11%)</title><rect x="316.5" y="53" width="1.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="319.48" y="63.5" ></text>
</g>
<g >
<title>runtime.heapSetType (1,142 samples, 4.66%)</title><rect x="1060.9" y="213" width="54.9" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1063.85" y="223.5" >runti..</text>
</g>
<g >
<title>runtime.getMCache (41 samples, 0.17%)</title><rect x="253.3" y="197" width="2.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="256.33" y="207.5" ></text>
</g>
<g >
<title>main.main (16,909 samples, 68.98%)</title><rect x="22.0" y="277" width="814.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="25.03" y="287.5" >main.main</text>
</g>
<g >
<title>strings.(*Builder).copyCheck (34 samples, 0.14%)</title><rect x="357.8" y="245" width="1.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="360.83" y="255.5" ></text>
</g>
<g >
<title>slices.Min[go.shape.[]float32,go.shape.float32] (250 samples, 1.02%)</title><rect x="850.8" y="277" width="12.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="853.79" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readLock (6 samples, 0.02%)</title><rect x="135.1" y="181" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="138.10" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (157 samples, 0.64%)</title><rect x="1042.4" y="101" width="7.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1045.37" y="111.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (1,009 samples, 4.12%)</title><rect x="137.0" y="133" width="48.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="140.03" y="143.5" >sysc..</text>
</g>
<g >
<title>runtime.getMCache (91 samples, 0.37%)</title><rect x="960.4" y="229" width="4.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="963.44" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBits (76 samples, 0.31%)</title><rect x="1108.7" y="181" width="3.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1111.70" y="191.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocker).tryAcquire (9 samples, 0.04%)</title><rect x="21.0" y="261" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="23.97" y="271.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (12 samples, 0.05%)</title><rect x="21.5" y="293" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="24.46" y="303.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (31 samples, 0.13%)</title><rect x="15.0" y="197" width="1.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="17.96" y="207.5" ></text>
</g>
<g >
<title>internal/runtime/syscall.EpollWait (3 samples, 0.01%)</title><rect x="1189.2" y="213" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1192.23" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).initHeapBits (46 samples, 0.19%)</title><rect x="1050.0" y="149" width="2.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1053.02" y="159.5" ></text>
</g>
<g >
<title>runtime.bool2int (9 samples, 0.04%)</title><rect x="959.4" y="229" width="0.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="962.43" y="239.5" ></text>
</g>
<g >
<title>strings.Count (791 samples, 3.23%)</title><rect x="1150.9" y="245" width="38.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1153.87" y="255.5" >str..</text>
</g>
<g >
<title>runtime.gcDrain (7 samples, 0.03%)</title><rect x="21.5" y="245" width="0.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="24.46" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (160 samples, 0.65%)</title><rect x="1042.3" y="149" width="7.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1045.32" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (122 samples, 0.50%)</title><rect x="313.6" y="181" width="5.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="316.64" y="191.5" ></text>
</g>
<g >
<title>runtime.bgsweep (215 samples, 0.88%)</title><rect x="11.1" y="293" width="10.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="14.11" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (20 samples, 0.08%)</title><rect x="17.5" y="261" width="0.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="20.46" y="271.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.01%)</title><rect x="21.9" y="229" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="24.89" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.01%)</title><rect x="1052.3" y="133" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1055.33" y="143.5" ></text>
</g>
</g>
</svg>
